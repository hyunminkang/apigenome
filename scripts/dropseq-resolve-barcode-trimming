#!/usr/bin/perl -w

use strict;
use FindBin;
use Time::HiRes;
use lib $FindBin::Bin;
use hyunlib qw(forkExecWait zopen wopen);
use wGetOptions qw(wGetOptions wpod2usage);

my $fq1 = "";
my $outf = "";
my $minLenBC = 8;
my $orgLenBC = 12;
my $umiLen = 8;
my $trailingBase = "T";
my $maxLenTrail = 3;

wGetOptions(
    "-Statistical Barcode Trimming for DropSeq experiment\nThis software package Read the cell barcode + UMI from DropSeq data (first read), and detect trailing base, and write a new FASTQ file resolving the barcode issue",
    "--Required Options",
    "fq1=s",[\$fq1,"The first end of FASTQ file from DropSeq reads"],
    "out=s",[\$outf,"The prefix of output file"],
    "--Additional Options",
    "min-len-bc=i", [\$minLenBC,"Minimum length of barcode to be trimmed"],
    "org-len-bc=i", [\$orgLenBC,"Length of original barcode to be trimmed"],
    "umi-len=i", [\$umiLen,"Length of Universal Molecular Index (UMI)"],
    "trailing-bases=s", [\$trailingBase,"Expected trailing base after cell barcode and UMI"]
    ) || wpod2usage(2);

wpod2usage(2) unless ( ( $fq1 ) && ( $outf ) );

print STDERR "Analysis started at ".scalar(localtime)."\n";

## 1. Read the barcode + UMI and obtain the overall distribution
my @trails = ();
my @sumTrails = ();
my @numBarcodes = (0) x ($orgLenBC+1);
for(my $l=$minLenBC; $l <= $orgLenBC; ++$l) {
    $trails[$l] = {};
    $sumTrails[$l] = [0,0];
}    

my $distf = "$outf.dist";
print STDERR "Reading FASTQ file $fq1 and writing distribution of barcode\n";
my $fh = zopen($fq1) || die "Cannot open $fq1 for reading\n";
my $line;

for(my $i=0; $line = $fh->getline(); ++$i) {
    print STDERR "Reading ".($i/4)." records at ".scalar(localtime)."\n" if ( $i % 20000000 == 0 );
    
    next unless ( $i % 4 == 1 );
    chomp $line;
    
    for(my $l=$minLenBC; $l <= $orgLenBC; ++$l) {
	my $barcode = substr($line,0,$l);
	my $umi     = substr($line,$l,$umiLen);
	my $trail   = substr($line,$umiLen+$l);
	$trail = substr($trail,0,$maxLenTrail+$orgLenBC-$l) if ( length($trail) > $maxLenTrail+($orgLenBC-$l) );
	my $r       = $trails[$l]->{$barcode};
	unless ( defined($r) ) {
	    $trails[$l]->{$barcode} = [0,0];
	    $r = $trails[$l]->{$barcode};
		++($numBarcodes[$l]);		
	}
	my $trailOnly = ( $trail =~ /^[N$trailingBase]*$/ ) ? 1 : 0;
	++($r->[$trailOnly]);
	++($sumTrails[$l]->[$trailOnly]);
    }
}
close($fh);

print STDERR "Finished reading records and writing $distf at ".scalar(localtime)."\n";

my $wh = wopen($distf) || die "Cannot open $distf for reading\n";
for(my $l=$minLenBC; $l <= $orgLenBC; ++$l) {
    my $r = $trails[$l];
    foreach my $bc (sort keys %{$r}) {
	print {$wh} join("\t",$bc,@{$r->{$bc}})."\n";
    }
}
close($wh);

print STDERR "Finished writing $distf at ".scalar(localtime)."\n";

print STDERR "Finished reading barcodes... below is the number of distinct barcode by length\n";
for(my $l= $minLenBC; $l <= $orgLenBC; ++$l) {
    print STDERR "\tLength $l:\t$numBarcodes[$l]\n";
}

## 2. Find the optimal barcode corresponding to the reads
## This test examines whether the reads are better explained by barcode trimming or independent barcodes
## For each barcode of length L, examine all barcodes of length L+1,
##
## If the true barcode length is L, not L+1, we should expect that
##  1) Most L+1 will have ~100% of trailing+, and L will do too (minimal loss of non-T)
##  2) The barcode will be distributed specifically in one of L+1. 
##  3) The total number of UMIs associated with the barcode L do not change much after barcode trimming
##

my %bcMap = ();

my @ns = qw(N A C G T);

my $mapf = "$outf.mapf";    
print STDERR "Contructing barcode map at ".scalar(localtime)."\n";

$fh = zopen($distf) || die "Cannot open $distf for reading\n";
$wh = wopen($mapf) || die "Cannot open $mapf for writing\n";

for(my $l=$minLenBC; $l < $orgLenBC; ++$l) {
    my $rp = $trails[$l];
    my $rc = $trails[$l+1];
    foreach my $bc (sort keys %{$rp}) {
	my @p = @{$rp->{$bc}};
	my @c = ();
	foreach my $n (@ns) {
	    my $vc = $rc->{$bc.$n};
	    if ( defined($vc) ) {
		push(@c,@{$vc});
	    }
	    else {
		push(@c,0,0);
	    }
	}
	die "Incorrect parent counts @p and children counts @c at L=$l with bc=$bc \n" if ( $p[0]+$p[1] != $c[0]+$c[1]+$c[2]+$c[3]+$c[4]+$c[5]+$c[6]+$c[7]+$c[8]+$c[9] );
	die "Incorrect parent counts @p and children counts @c at L=$l - bc=$bc\n" if ( $p[1] > $c[1]+$c[3]+$c[5]+$c[7]+$c[9] );
	
	## Requirement 1 : Over 90% of trailingOnly is kept from previous length
	my $p1 = $p[1];
	my $c1 = $c[1]+$c[3]+$c[5]+$c[7]+$c[9];
	if ( $p1 > 0.9 * $c1 ) {
	    ## Requirement 2 : The difference is statistically significant at p<0.01 (z=2.33), even if the null hypothesis assumed half/half
	    my $z = (($p1 + 0.5) - 0.5 * ($c1 + 1)) / sqrt( ($c1+1) * 0.5 * 0.5 );
	    
	    if ( $z > 2.33 ) {
		## Requirement 3 : Less than 90% of length L barcode comes from one of the four L+1
		my $maxLonger = $c[0]+$c[1];
		for(my $i=0; $i < 4; ++$i) {
		    if ( $maxLonger < $c[$i*2+2]+$c[$i*2+3] ) {
			$maxLonger = $c[$i*2+2]+$c[$i*2+3];
		    }
		}
		if ( ($p[0] + $p[1]) * 0.9 >= $maxLonger ) { ## passed both criteria
		    my $endBC = $bc;
		    while(defined($bcMap{$endBC})) {
			$endBC = $bcMap{$endBC};
		    }

		    print {$wh} join("\t",$endBC,$bc,$p[0],$p[1]);
		    for(my $i=0; $i < @ns; ++$i) {
			my $n = $ns[$i];
			$bcMap{$bc.$n} = $endBC;
			print {$wh} "\t".join("\t",$bc.$n,$c[2*$i],$c[2*$i+1]);
		    }
		    print {$wh} "\n";
		}
	    }
	}
    }
}
close($wh);
print STDERR "Finished contructing barcode map at ".scalar(localtime)."\n";

$fh = zopen($fq1) || die "Cannot open $fq1 for reading\n";
$wh = wopen($outf) || die "Cannot open $outf for writing\n";

print STDERR "Writing output FASTQ file $outf at ".scalar(localtime)."\n";    

my %hEndBC = ();

for(my $i=0; $line = $fh->getline(); ++$i) {
    print STDERR "Reading $i records at ".scalar(localtime)."\n" if ( $i % 5000000 == 0 );
    
    my $seq   = $fh->getline();
    my $dummy = $fh->getline();
    my $qual  = $fh->getline();
    my $orgBC = substr($seq,0,$orgLenBC);
    my $endBC = $bcMap{$orgBC};
    $endBC = $orgBC unless ( defined($endBC) );
    ++$hEndBC{$endBC};

    chomp($seq);
    chomp($qual);
    my $seqL = length($seq);
    my $bcL  = length($endBC);
    print {$wh} $line;
    print {$wh} $endBC;
    for(my $i=$bcL; $i < $orgLenBC; ++$i) {
	print {$wh} "A"; ## Put 'N' for trimmed barcode
    }
    print {$wh} substr($seq,$bcL,$seqL-$orgLenBC);
    print {$wh} "\n";
    print {$wh} $dummy;
    print {$wh} substr($qual,0,$bcL);
    for(my $i=$bcL; $i < $orgLenBC; ++$i) {
	print {$wh} "9"; ## Put '9' for the qualities of trimmed barcodes
    }
    print {$wh} substr($qual,$bcL,$seqL-$orgLenBC);
    print {$wh} "\n";
}
close($wh);
close($fh);

print STDERR "Finished writing output FASTQ file $outf at ".scalar(localtime)."\n";

my %cntEndBC = ();
my @mins = (1, 10, 100, 1000, 10000);
foreach my $bc (keys %hEndBC) {
    my $nReads = $hEndBC{$bc};
    my $len = length($bc);
    foreach my $min (@mins) {
	if ( $nReads >= $min ) {
	    ++$cntEndBC{$len}{$min};
	}
    }
}


my $summary = "$outf.summary";
open(OUT,">$summary") || die "Cannot open file $summary\n";
print OUT "--------------------------------------------\n";
print OUT "Number of barcodes with minimum read counts:\n";
print OUT "LENGTH";
foreach my $min (@mins) { print OUT "\t$min+";}
print OUT "\n";
for(my $l=$minLenBC; $l <= $orgLenBC; ++$l) {
    print OUT $l;
    foreach my $min (@mins) {
	print OUT "\t".(defined($cntEndBC{$l}{$min}) ? $cntEndBC{$l}{$min} : 0);
    }
    print OUT "\n";
}
print OUT "--------------------------------------------\n";
close OUT;
