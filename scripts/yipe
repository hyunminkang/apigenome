#!/usr/bin/perl -w

use strict;
use FindBin;
use lib $FindBin::Bin;
use wGetOptions qw(wpod2usage wGetOptions);
use hyunlib qw(makeMake forkExecWait);
use lib "$FindBin::Bin/../lib/perl5";
use YAML::AppConfig;

my @yamls = ();
my @runs = ();

wGetOptions(
    "-Scan the gotCloud QC outputs, and merge summarized statistics",
    "--Required Options",
    "yaml=s" => [\@yamls, "Input YAML files"],
    "run=s" => [\@runs,   "Step(s) to run"],
    ) || wpod2usage(2);

if ( $#yamls < 0 ) {
    print STDERR "ERROR: Missing required option\n";
    wpod2usage(2);
}

my $conf = YAML::AppConfig->new(file => $yamls[0]);
for(my $i=0; $i < @yamls; ++$i) {
    $conf->merge(file => $yamls[$i]);
}

$conf->dump();

## parse all iterable variables first
#my $iterables = $conf->get("ITERTABLES");
#if ( defined($iterables) ) {
#    foreach my $k (keys %{$iterables}) {
#	my $rlist = $iterables->{$k}
#	if ( define($rlist->{file}) ) {
#	    open(IN,$rlist->{file}) || die "Cannot open ".$rlist->{$file}."\n";
#	    while(<IN>) {
#		my @F = split;
#	    }
#	    close IN;
#	}
#   }
#}


### Go to the steps we need to run
#foreach my $run (@runs) {
#    my $confRun = $conf->get($run);
#}

# $conf->set("var_dir","\$etc_dir/var");
	   
# # Get settings in two different ways, both equivalent:
# print "etc_dir: ".$conf->get("etc_dir")."\n";
# print "etc_dir (raw): ".$conf->get("etc_dir",1)."\n";

# print "var_dir: ".$conf->get("var_dir")."\n";
# print "var_dir (raw): ".$conf->get("var_dir",1)."\n";

# print "var2_dir: ".$conf->get("var2_dir")."\n";
# print "var2_dir (raw): ".$conf->get("var2_dir",1)."\n";

# print "empty: ".$conf->get("empty")."\n";
# print "empty (raw): ".$conf->get("empty",1)."\n";

# my $rh = $conf->get("libs");
# my @rhkeys = sort keys %{$rh};

# foreach my $key (@rhkeys) {
#     print "libs->$key\n";
# }

# # Variables are dynamically scoped:
# print "libs:perl:vendor - ".$conf->get_libs->{perl}->{vendor}."\n";  # returns "/opt/usr/lib/perl"

# print "libs:perl:usr_local - ".$conf->get_libs->{perl}->{usr_local}."\n";  # returns "/opt/usr/lib/perl"

# # Variables can be escaped, to avoid accidental interpolation:
# print "escape example: ".$conf->get("escape_example")."\n";  # returns "/opt/$var_dir/\$var_dir"

print $conf->dump();


## getContextConfig
## getContextConfig($root, $key, @contexts)
# sub getContextConfig {
#     my ($root, $key, @contexts) = @_;

#     my $rst;

#     if ( $#contexts >= 0 ) {
# 	my $ctx = shift(@contexts);
# 	if ( defined($root->{$ctx}) ) {
# 	    $rst = getContextConfig($root->{$ctx}, $key, @contexts);
# 	}
#     }

#     if ( defined($rst) ) {
# 	return $rst;
#     }
#     elsif ( defined($root->{$key}) ) {
# 	return $root->{$key};
#     }
#     else {
# 	return undef;
#     }
# }


###############################
## Example pipeline
## SPECIAL VARIABLES - start with _, all capital
##  - _REF_DIR
##  - _
##
## global configurations
## 
##
## Structure of pipelines
## 

# sub printIndent {
#     my ($indent, $text) = @_;
#     for(my $i=0; $i < $indent; ++$i) {
# 	print "  ";
#     }
#     print $text;
#     print "\n";
# }

# sub myDump {
#     my $r = shift;
#     my $level = shift;
    
#     my $rtype = ref($r);
#     if ( $rtype ) {
# 	if ( $rtype eq "SCALAR" ) {
# 	    printIndent($level,"<".${$r}.">");
# 	}
# 	elsif ( $rtype eq "ARRAY" ) {
# 	    printIndent($level,"[");
# 	    foreach my $e (@{$r}) {
# 		myDump($e,$level+1);
# 	    }
# 	    printIndent($level,"]");
# 	}
# 	elsif ( $rtype eq "HASH" ) {
# 	    printIndent($level,"{");
# 	    foreach my $e (sort keys %{$r}) {
# 		printIndent($level+1,"KEY : *$e*");
# 		myDump($r->{$e},$level+1);
# 	    }
# 	    printIndent($level,"}");	    
# 	}
# 	else {
# 	    die "Cannot process ref type $rtype\n";
# 	}
#     }
#     else {
# 	$r =~ s/\R/\\n/g;
# 	printIndent($level,"SCALAR: *$r*");
#     }
# }
