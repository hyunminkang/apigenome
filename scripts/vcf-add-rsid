#!/usr/bin/perl -w

use strict;
use FindBin;
use lib $FindBin::Bin;
#use lib "/net/fantasia/home/hmkang/bin/utils/";
use hyunlib qw(initRef getCpGs);
use wGetOptions qw(wGetOptions wpod2usage);

my $vcf = "";
my $dbSNPf = ""; #"/net/fantasia/home/hmkang/data/dbSNP/b137/00-All.vcf.gz";
my $out = "";
my $key = "";
my $sepchr = "";
my $keep = "";
my $binbgzip = "bgzip";
my $bintabix = "tabix";
my $binbcftools = "bcftools";

wGetOptions(
    "-Add rsID into VCF",
    "--Required Options",
    "vcf=s",[\$vcf,"Input VCF file"],
    "--Additional Options",
    "db=s",[\$dbSNPf,"VCF file containing dbSNP or Other files"."VCF file containing dbSNP resources or other external file\nFor example, if you want to use ESP6900 data, use /net/1000g/hmkang/data/EVS/ESP6500SI.chr1.snps_indels.vcf.gz instead with --sepchr turned on"],
    "sepchr",[\$sepchr,"VCF is separated by chromosome"],
    "key=s",[\$key,"Instead of modifying rsID in the output VCF, Add INFO field with specific KEY field with 0 and 1 variable to indicate existence in the database"],
    "out=s",[\$out,"Output file. STDOUT if unspecified"],
    "keep",[\$keep,"Keep the existing SNP ID column. Even if rsID does not exist in the database"],
    ) || wpod2usage(2);


wpod2usage(2) unless ( $vcf );

if ( $vcf =~ /\.gz$/ ) { open(VCF,"zcat $vcf|") || die "Cannot open file\n"; }
else { open(VCF,$vcf) || die "Cannot open file\n"; }

die "Cannot open $dbSNPf\n" unless ( -s $dbSNPf );
die "$dbSNPf is not indexed and tabixed\n" unless ( $dbSNPf =~ /\.vcf.gz$/ );

if ( $out =~ /\.vcf.gz$/ ) { open(OUT,"| $binbgzip -c > $out") || die "Cannot open file\n"; }
elsif ( $out =~ /\.bcf$/ ) { open(OUT,"| $binbcftools view -Ob -o $out /dev/stdin") || die "Cannot open file $out using $binbcftools\n"; }
elsif ( $out ) { open(OUT,">$out") || die "Cannot open file\n"; }
else { *OUT = *STDOUT; }

if ( ( $keep ) && ( $key ) ) {
    print STDERR "ERROR: --key and --keep cannot be used together\n";
    wpod2usage(2);
}

my $chr = "";
my $pos = 0;
my $bufLine = "";   ## last line of dbSNP file read
my $rBuf = "";      ## reference to the parsed version of bufLine (always match to bufLine)
my @rG = ();   ## reference to the parsed version of active lines (empty - nothing left) -- should be all same positions
my $posActive = 0;  ## position of active variant
while(<VCF>) {
    if ( /^#/ ) {
	print OUT $_;
    }
    else {
	## read the variant
	my @F = split(/[\t\r\n]/);

	## Load or reload dbSNP file based on the positoon
	if ( ( $F[0] ne $chr ) || ( $F[1] - $pos > 50000 ) ) {  ## chromosome was changed or jumped too much (>50kb)
	    close DBF if ( defined(fileno DBF) );
	    $chr = $F[0];
	    print STDERR "Processing chr$chr:$pos..\n";

	    my $cdb = $dbSNPf;
	    if ( $sepchr ) {
		$cdb =~ s/chr1/chr$chr/g;
	    }

	    if ( $cdb =~ /\.vcf.gz$/ ) {
		open(DBF,"$bintabix $cdb $chr:0|") || die "Cannot open file\n";
	    }
	    elsif ( $cdb =~ /\.bcf$/ ) {
		open(DBF,"$binbcftools view $cdb $chr:0-|") || die "Cannot open file\n";		
	    }

	    $bufLine = <DBF>;   ## read a line
	    if ( $bufLine ) {  ## if a line was read
		my @G = split(/[ \t\r\n]+/,$bufLine);  ## first, parse the buffer line
		$rBuf = \@G;
		$posActive = 0;
		while( ( $posActive < $F[1] ) || ( $posActive == $rBuf->[1] ) ) {  ## need to read more lines
		    if ( $posActive < $F[1] ) {   ## if the active position is behind the current position, no need to keep the ties
			$posActive = $rBuf->[1];
			@rG = ($rBuf);
		    }
		    elsif ( $posActive == $rBuf->[1] ) {
			push(@rG,$rBuf);
		    }
		    else {
			die "Something is wrong here. posActive=$posActive F[1]=$F[1] rBuf is @{$rBuf}\n";
		    }
		    
		    $bufLine = <DBF>;
		    if ( $bufLine ) {
			my @G2 = split(/[ \t\r\n]+/,$bufLine);  ## first, parse the buffer line	 
			$rBuf = \@G2;
		    }
		    else {
			my @G2 = ($chr,1e9);
			$rBuf = \@G2;
			$posActive = 1e9;			
			last;
		    }
		}
	    }
	    else {  ## no variant in dbSNP
		my @G2 = ($chr,1e9);
		$rBuf = \@G2;
		@rG = ($rBuf);
		$posActive = 1e9;
	    }
	}  ## after this, $posActive must be equal or greater than $F[1], $posActive < $rBuf
	elsif ( $posActive < $F[1] ) {
	    while( ( $posActive < $F[1] ) || ( $posActive == $rBuf->[1] ) ) {  ## need to read more lines
		if ( $posActive < $F[1] ) {   ## if the active position is behind the current position, no need to keep the ties
		    $posActive = $rBuf->[1];
		    @rG = ($rBuf);
		}
		elsif ( $posActive == $rBuf->[1] ) {
		    push(@rG,$rBuf);
		}
		else {
		    die "Something is wrong here 2. posActive=$posActive F[1]=$F[1] rBuf is @{$rBuf}\n";
		}
		
		$bufLine = <DBF>;
		if ( $bufLine ) {
		    my @G2 = split(/[ \t\r\n]+/,$bufLine);  ## first, parse the buffer line			
		    $rBuf = \@G2;
		}
		else {
		    my @G2 = ($chr,1e9);
		    $rBuf = \@G2;
		    $posActive = 1e9;		    
		    last;
		}
	    }	    
	}

	die "Something is wrong here 3. posActive=$posActive F[1]=$F[1] rBuf is @{$rBuf}\n" if ( $posActive < $F[1] );

	$F[2] = "." unless ( $keep );
	my $found = 0;
	if ( $posActive == $F[1] ) { ## if there is a matching position, scan for the variant matching alleles
	    for(my $i=0; $i < @rG; ++$i) {
		if ( ( $rG[$i]->[3] eq $F[3] ) && ( $rG[$i]->[4] eq $F[4] ) ) {  ## exact allele match
		    $F[2] = $rG[$i]->[2] unless ( $key );  ## change the variant ID
		    $found = 1;
		    last;
		}
	    }
	}
	$F[7] .= ";$key=$found" if ( $key );

	print OUT join("\t",@F);
	print OUT "\n";
	$pos = $F[1];
    }
}
close OUT;

if ( $out =~ /\.gz$/ ) { 
    my $cmd = "$bintabix -pvcf $out";
    print "$cmd\n"; print `$cmd`;
}
