#!/usr/bin/perl -w

use strict;
#use Getopt::Long;
#use lib "/net/fantasia/home/hmkang/bin/utils/";
use FindBin;
use lib $FindBin::Bin;
use hyunlib qw(forkExecWait);
use wGetOptions qw(wpod2usage wGetOptions);
use warnings;

my $vcf = "";
my $dbSNPf = "/net/1000g/hmkang/data/dbSNP/b146/b37/All_20151104.vcf.gz";
my $FNRvcf = "/net/fantasia/home/hmkang/data/GATK-resources/hapmap_3.3.b37.sites.vcf.gz";
my $chr = "";
my $ref = "/data/local/ref/karma.ref/human.g1k.v37.fa";
my $target = "";
my $auto = "";
my $infoField = "AC";
my $infoBreaks = "1,2,3,0.001,0.01,0.1";
my $infoBin = 0;

my $binbgzip = "$FindBin::Bin/bgzip";
my $bintabix = "$FindBin::Bin/tabix";

wGetOptions(
    "-Summarize SNPs and indels in VCF Files",
    "--Input file options",
    "vcf=s" => [\$vcf, "Input VCF file (STDIN is default)"],
    "dbsnp=s" => [\$dbSNPf, "dbSNP file location"],
    "FNRvcf=s" => [\$FNRvcf, "location of gold standard VCF file (such as dbSNP)"],
    "tabix=s" => [\$bintabix, "Location of tabix binary"],
    "ref=s" => [\$ref, "Location to the reference genome"],    
    "--Options for focused regions",                
    "chr=s" => [\$chr, "Chromosome label to focus on (recommended if using one chromosome)"],
    "auto" => [\$auto, "Focus on autosomal chromosomes only"],
    "target=s" => [\$target, "Use specific target BED to focus on"],    
    "--Options for modifying the FILTER columns on-the-fly",
    "info-breaks=s" => [\$infoBreaks, "Comma-separated string for determining the breakpoints of use-specified INFO fields"],
    "info-field=s" => [\$infoField, "String for user-specified INFO fields"],
    "info-bin=f" => [\$infoBin, "Binning "],
    ) || wpod2usage(2);

&initRef($ref);

if ( $target ) {
    die "Cannot use target $target because dbSNP and FNRvcf are not tabixed\n" unless ( ( -s "$dbSNPf.tbi" ) && ( -s "$FNRvcf.tbi" ) );
    if ( $dbSNPf ) {
	my $target_dbSNPf = $dbSNPf;
	$target_dbSNPf =~ s/\.vcf.gz$//;
	my @F = split(/\//,$target);
	my $fn = $F[$#F];
	$target_dbSNPf =~ s/\.vcf.gz$//;
	$target_dbSNPf = "$target_dbSNPf.$fn.vcf.gz";

	die "Cannot open $target\n" unless ( -s $target );
	
	unless ( ( -s $target_dbSNPf ) && ( -s "$target_dbSNPf.tbi" ) ) {
	    &forkExecWait("$bintabix -h -B $dbSNPf $target | $binbgzip -c > $target_dbSNPf");
	    &forkExecWait("$bintabix -pvcf $target_dbSNPf");	
	}
	$dbSNPf = $target_dbSNPf;
    }

    if ( $FNRvcf ) {
	my $target_FNRvcf = $FNRvcf;
	$target_FNRvcf =~ s/\.vcf.gz$//;
	my @F = split(/\//,$target);
	my $fn = $F[$#F];
	$target_FNRvcf =~ s/\.vcf.gz$//;
	$target_FNRvcf = "$target_FNRvcf.$fn.vcf.gz";

	die "Cannot open $target\n" unless ( -s $target );

	unless ( ( -s $target_FNRvcf ) && ( -s "$target_FNRvcf.tbi" ) ) {	
	    &forkExecWait("$bintabix -h -B $FNRvcf $target | $binbgzip -c > $target_FNRvcf");
	    &forkExecWait("$bintabix -pvcf $target_FNRvcf");
	}

	$FNRvcf = $target_FNRvcf;	
    }
}

my %hdbsnps = ();

if ( $dbSNPf ) {
    my $ndbsnp = 0;
    ## check if dbSNP file ends with .vcf or .vcf.gz
    if ( ( $dbSNPf =~ /.vcf$/ ) || ( $dbSNPf =~ /.vcf.gz$/ ) ) {
	print STDERR "loading $dbSNPf as a VCF input..\n";
	if ( $dbSNPf =~ /.vcf.gz$/ ) {
	    if ( $chr ) {
                die "Can't read $dbSNPf.tbi" unless ( -f "$dbSNPf.tbi" and -r "$dbSNPf.tbi");
		open(DBSNP,"$bintabix $dbSNPf $chr:0 |") || die "Cannot open file\n";
	    }
	    else {
                die "Can't read $dbSNPf" unless( -f $dbSNPf and -r $dbSNPf);
                open(DBSNP,"zcat $dbSNPf |") || die "Cannot open file\n";
	    }
	}
	else {
	    open(DBSNP,$dbSNPf) || die "Cannot open file\n";
	}
	while(<DBSNP>) {
	    next if ( /^#/ );
	    my ($chr,$bp,$id,$ref,$alt) = split;
	    next if ( ($auto) && ( ! ( $chr =~ /^(chr)?^\d+$/ ) ) );
	    #next if ( ( length($ref) > 1 ) || ( length($alt) > 1 ) );
	    $hdbsnps{"$chr:$bp"} = 1;
	    ++$ndbsnp;
	}
	close DBSNP;
    }
    else {
	print STDERR "loading $dbSNPf\n";
	open(DBSNP,$dbSNPf) || die "Cannot open file\n";
	while(<DBSNP>) {
	    my ($chr,$rs,$bp) = split;
	    next if ( ($auto) && ( ! ( $chr =~ /^(chr)?\d+$/ ) ) );
	    if ( $bp ) {
		$hdbsnps{"$chr:".($bp+1)} = 1;
		++$ndbsnp;
	    }
	}
	close DBSNP;
    }
    print STDERR "finished loading dbSNP for $ndbsnp variants\n";
}
else {
    print STDERR "Skipped loading dbSNP\n";
}

my %hFNRs = ();
my $nFNR = 0;
if ( $FNRvcf ) {
    print STDERR "loading FNR evaluation sites from $FNRvcf\n";
    if ( $FNRvcf =~ /\.gz$/ ) {
	if ( ($chr) && ( -s "$FNRvcf.tbi" ) ) {
            die "Can't read $FNRvcf.tbi" unless( -f "$FNRvcf.tbi" and -r "$FNRvcf.tbi");
	    open(IN,"$bintabix -h $FNRvcf $chr:0 |") || die "Cannot open file\n";
	}
	else {
            die "Can't read $FNRvcf" unless( -f $FNRvcf and -r $FNRvcf);
	    open(IN,"zcat $FNRvcf|") || die "Cannot open file\n";
	}
    }
    else {
	open(IN,$FNRvcf) || die "Cannot open file\n";
    }
    while(<IN>) {
	next if ( /^#/ );
	my ($chrom,$pos,$id,$ref,$alt,$qual,$filter,$info) = split(/[\t\r\n]/);
	next if ( ($auto) && ( ! ( $chrom =~ /^(chr)?\d+$/ ) ) );
	next if ( ( length($ref) > 1 ) || ( length($alt) > 1 ) );
	++$nFNR;
	$hFNRs{"$chrom:$pos"} = $id;
    }
    close IN;
}
else {
    print STDERR "Skipped loading FNR evaluation sites\n";
}

if ( $vcf eq "" ) {
    *IN = *STDIN;
}
elsif ( $vcf =~ /\.gz$/ ) {
    die "Can't read $vcf" unless( -f $vcf and -r $vcf);
    open(IN,"zcat $vcf|") || die "Cannot open file\n";
}
else {
    open(IN,$vcf) || die "Cannot open file $vcf\n";
}
my %hcnts = ();
my %mcnts = ();
my %hszchrs = ();
my $prev = "";

my @infobrs = split(/,/,$infoBreaks) if ( $infoBreaks );

print STDERR "WARNING: --info $infoField was provided but no --breaks or --bin was set. Assuming discrete values\n" if ( ( $infoField ) && ( $infoBin == 0 ) && ( ! $infoBreaks ) );
					   
while(<IN>) {
    next if ( /^#/ );
    my ($chrom,$pos,$id,$ref,$alt,$qual,$filter,$info) = split(/[\t\r\n ]+/);

    print STDERR "Processing $chrom:$pos\n" if ( $pos % 100000 == 0 );

    next if ( $alt =~ /,/ );
    #next if ( ( length($ref) > 1 ) || ( length($alt) > 1 ) );
    next if ( ($auto) && ( ! ( $chrom =~ /^(chr)?\d+$/ ) ) );
    #next if ( $prev eq $pos );
    $prev = $pos;

    if ( $infoField ) {
	$info = "$info;QUAL=$qual";

	my $val = $2 if ( $info =~ /(^|;)$infoField=([^;]+)(;|$)/ );
	#die "$infoBin $infoBreaks $infoField $val $info\n";
	
	if ( defined($val) ) {	
	    if ( $infoBreaks ) {
		if ( $infoField eq "AC" ) {
		    splice(@infobrs,0,0,0) if ( $infobrs[0] > 0 );

		    my $set = 0;
		    my $an = $2 if ( $info =~ /(^|;)AN=(\d+)/ );
		    
		    if ( $infobrs[$#infobrs] < 1 ) {
			if ( $val/($an+1e-6) >= $infobrs[$#infobrs] ) {
			    $filter .= ";AF=[".($infobrs[$#infobrs]).",1]";
			    $set = 1;
			}
		    }
		    else {
			if ( $val >= $infobrs[$#infobrs] ) {
			    $filter .= ";$infoField=[".($infobrs[$#infobrs]).",Inf)";
			    $set = 1;
			}
		    }

		    if ( $set == 0 ) {
			for(my $i=1; $i < @infobrs; ++$i) {
			    if ( $infobrs[$i] < 1 ) {
				if ( $val/($an+1e-6) < $infobrs[$i] ) {
				    if ( $infobrs[$i-1] < 1 ) {				
					$filter .= ";AF=[".($infobrs[$i-1]).",".($infobrs[$i]).")";
					$set = 1;
				    }
				    else {
					$filter .= ";[AC=".($infobrs[$i-1]).",AF=".($infobrs[$i]).")";
					$set = 1;				    
				    }
				}
			    }
			    elsif ( $val < $infobrs[$i] ) {
				$filter .= ";AC=[".($infobrs[$i-1]).",".($infobrs[$i]).")";
				$set = 1;					
			    }
			    last if ( $set > 0 );
			}
		    }
		}
		else {
		    if ( $val < $infobrs[0] ) {
			$filter .= ";$infoField=(-Inf,$infobrs[0])";
		    }
		    elsif ( $val >= $infobrs[$#infobrs] ) {
			$filter .= ";$infoField=[".($infobrs[$#infobrs]).",Inf)";		    
		    }
		    else {
			for(my $i=1; $i < @infobrs; ++$i) {
			    if ( $val < $infobrs[$i] ) {
				$filter .= ";$infoField=[".($infobrs[$i-1]).",".($infobrs[$i]).")";
				last;
			    }
			}	    
		    }
		}
	    }
	    elsif ( $infoBin > 0 ) {
		my $bin = int($val/$infoBin);
		$filter .= ";$infoField=[".($bin*$infoBin).",".(($bin+1)*$infoBin).")";
	    }
	    else {
		$filter .= ";$infoField=$val";
	    }
	}
	else {
	    $filter .= ";$infoField=.";
	}
    }

    my ($cpg) = @{&getCpGs($chrom,$pos,$pos)};

    $ref = uc($ref);
    $alt = uc($alt);
    
    my @filters = split(/;/,$filter);
    unless ( defined($hcnts{$filter}) ) { # Old/New, CpG/nonCpG, Ts/Tv
	$hcnts{$filter} = [0,0,[0,0,0,0,0,0,0,0],0,[0,0],[0,0]];
    }
    
    foreach my $f (@filters) {
	unless ( defined($mcnts{$f}) ) {
	    $mcnts{$f} = [0,0,[0,0,0,0,0,0,0,0],0,[0,0],[0,0]];
	}
    }

    if ( length($ref) + length($alt) == 2 ) {
	my $refalt = $ref.$alt;
	my $dbsnpFlag = 0;
	if ( ( ( $dbSNPf eq "" ) && ( $id =~ /^rs/ ) ) || ( ( $dbSNPf ne "" ) && ( defined($hdbsnps{"$chrom:$pos"}) ) ) ) {
	    ++($hcnts{$filter}->[1]);
	    $dbsnpFlag = 1;
	    
	    foreach my $f (@filters) {
		++($mcnts{$f}->[1]);
	    }
	}
	
	if ( ( $refalt eq "AG" ) || ( $refalt eq "GA" ) || ( $refalt eq "TC") || ( $refalt eq "CT" ) ) {
	    my $key = 0+(($dbsnpFlag ==1) ? 0 : 4) + ($cpg == 1 ? 2 : 0);
	    ++($hcnts{$filter}->[2]->[$key]);
	    
	    foreach my $f (@filters) {
		++($mcnts{$f}->[2]->[$key]);
	    }
	}
	elsif ( ( $ref ne $alt ) && ( $refalt =~ /^[ACGT][ACGT]$/ ) ) {
	    my $key = 1+(($dbsnpFlag ==1) ? 0 : 4) + ($cpg == 1 ? 2 : 0);
	    ++($hcnts{$filter}->[2]->[$key]);
	    
	    foreach my $f (@filters) {
		++($mcnts{$f}->[2]->[$key]);
	    }
	}
	if ( defined($hFNRs{"$chrom:$pos"}) ) {
	    ++($hcnts{$filter}->[3]);
	    
	    foreach my $f (@filters) {
		++($mcnts{$f}->[3]);
	    }
	}
	++($hcnts{$filter}->[0]);
	foreach my $f (@filters) {
	    ++($mcnts{$f}->[0]);
	}
    }
    elsif ( $alt =~/,/ ) {
	my $dbsnpFlag = 0;
	if ( ( ( $dbSNPf eq "" ) && ( $id =~ /^rs/ ) ) || ( ( $dbSNPf ne "" ) && ( defined($hdbsnps{"$chrom:$pos"}) ) ) ) {
	    ++($hcnts{$filter}->[5]->[1]);
	    $dbsnpFlag = 1;
	    
	    foreach my $f (@filters) {
		++($mcnts{$f}->[5]->[1]);
	    }
	}
	++($hcnts{$filter}->[5]->[0]);
	foreach my $f (@filters) {	
	    ++($mcnts{$f}->[5]->[0]);
	}	
    }
    else {
	my $dbsnpFlag = 0;
	if ( ( ( $dbSNPf eq "" ) && ( $id =~ /^rs/ ) ) || ( ( $dbSNPf ne "" ) && ( defined($hdbsnps{"$chrom:$pos"}) ) ) ) {
	    ++($hcnts{$filter}->[4]->[1]);
	    $dbsnpFlag = 1;
	    
	    foreach my $f (@filters) {
		++($mcnts{$f}->[4]->[1]);
	    }
	}
	++($hcnts{$filter}->[4]->[0]);
	foreach my $f (@filters) {		
	    ++($mcnts{$f}->[4]->[0]);	
	}	
    }
}

close IN;

my @totals = (0,0,[0,0,0,0,0,0,0,0],0,[0,0],[0,0]);
my @passes = (0,0,[0,0,0,0,0,0,0,0],0,[0,0],[0,0]);
my @fails  = (0,0,[0,0,0,0,0,0,0,0],0,[0,0],[0,0]);

print "--------------------------------------------------------------------------------------------------------------\n";
print "\t\tSNP SUMMARY\n";
print "--------------------------------------------------------------------------------------------------------------\n";
print sprintf("%20s","FILTER")."\t#SNPs\t#dbSNP\t%dbSNP\t%CpG\t%CpG\t%Known\t%Novel\t%nCpG-K\t%nCpG-N\t%HM3\t%HM3\n";
print sprintf("%20s","")."\t\t\t\tKnown\tNovel\tTs/Tv\tTs/Tv\tTs/Tv\tTs/Tv\tsens\t/SNP\n";
print "--------------------------------------------------------------------------------------------------------------\n";

foreach my $key (sort keys %hcnts) {
    for(my $i=0; $i < @totals; ++$i) {
	if ( $key =~ /PASS/ ) {
	    if ( $i == 2 ) {
		for(my $j=0; $j < 8; ++$j) {
		    $passes[$i]->[$j] += $hcnts{$key}->[$i]->[$j];
		    $totals[$i]->[$j] += $hcnts{$key}->[$i]->[$j];
		}
	    }
	    elsif ( ( $i == 4 ) || ( $i == 5 ) ) {
		for(my $j=0; $j < 2; ++$j) {
		    $passes[$i]->[$j] += $hcnts{$key}->[$i]->[$j];
		    $totals[$i]->[$j] += $hcnts{$key}->[$i]->[$j];
		}		
	    }
	    else {
		$passes[$i] += $hcnts{$key}->[$i];	    
		$totals[$i] += $hcnts{$key}->[$i];
	    }
	}
	else {
	    if ( $i == 2 ) {
		for(my $j=0; $j < 8; ++$j) {
		    $fails[$i]->[$j] += $hcnts{$key}->[$i]->[$j];
		    $totals[$i]->[$j] += $hcnts{$key}->[$i]->[$j];
		}
	    }
	    elsif ( ( $i == 4 ) || ( $i == 5 ) ) {
		for(my $j=0; $j < 2; ++$j) {
		    $fails[$i]->[$j] += $hcnts{$key}->[$i]->[$j];
		    $totals[$i]->[$j] += $hcnts{$key}->[$i]->[$j];
		}		
	    }	    
	    else {
		$fails[$i] += $hcnts{$key}->[$i];	
		$totals[$i] += $hcnts{$key}->[$i];
    	    }
	}
    }
    &printSNPSummary($key,$hcnts{$key});
}
print "--------------------------------------------------------------------------------------------------------------\n";
print sprintf("%20s","FILTER")."\t#SNPs\t#dbSNP\t%dbSNP\t%CpG\t%CpG\t%Known\t%Novel\t%nCpG-K\t%nCpG-N\t%HM3\t%HM3\n";
print sprintf("%20s","")."\t\t\t\tKnown\tNovel\tTs/Tv\tTs/Tv\tTs/Tv\tTs/Tv\tsens\t/SNP\n";
print "--------------------------------------------------------------------------------------------------------------\n";
foreach my $key (sort keys %mcnts) {
    &printSNPSummary($key,$mcnts{$key});
}
print "--------------------------------------------------------------------------------------------------------------\n";
if ( $passes[0] > 0 ) {
    &printSNPSummary("PASS",\@passes);
}
if ( $fails[0] > 0 ) {
    &printSNPSummary("FAIL",\@fails);
}
&printSNPSummary("TOTAL",\@totals);
print "------------------------------------------------------------------------------------------------------------\n";

print "\n\n--------------------------------------------------------------------------------------------------------------\n";
print "\t\tINDEL SUMMARY\n";
print "--------------------------------------------------------------------------------------------------------------\n";
print sprintf("%20s","FILTER")."\t#Indels\t#dbSNP\t%dbSNP\n";
print "--------------------------------------------------------------------------------------------------------------\n";
foreach my $key (sort keys %hcnts) {
    &printIndelSummary($key,$hcnts{$key});
}
print "--------------------------------------------------------------------------------------------------------------\n";
print sprintf("%20s","FILTER")."\t#Indels\t#dbSNP\t%dbSNP\n";
print "--------------------------------------------------------------------------------------------------------------\n";
foreach my $key (sort keys %mcnts) {
    &printIndelSummary($key,$mcnts{$key});
}
print "--------------------------------------------------------------------------------------------------------------\n";
if ( $passes[4]->[0] > 0 ) {
    &printIndelSummary("PASS",\@passes);
}
if ( $fails[4]->[0] > 0 ) {
    &printIndelSummary("FAIL",\@fails);
}
&printIndelSummary("TOTAL",\@totals);
print "\n\n--------------------------------------------------------------------------------------------------------------\n";

print "\n\n--------------------------------------------------------------------------------------------------------------\n";
print "MULTI-ALLELIC SUMMARY\n";
print "--------------------------------------------------------------------------------------------------------------\n";
print sprintf("%20s","FILTER")."\t#Indels\t#dbSNP\t%dbSNP\n";
print "--------------------------------------------------------------------------------------------------------------\n";
foreach my $key (sort keys %hcnts) {
    &printMultiSummary($key,$hcnts{$key});
}
print "--------------------------------------------------------------------------------------------------------------\n";
print sprintf("%20s","FILTER")."\t#Indels\t#dbSNP\t%dbSNP\n";
print "--------------------------------------------------------------------------------------------------------------\n";
foreach my $key (sort keys %mcnts) {
    &printMultiSummary($key,$mcnts{$key});
}
print "--------------------------------------------------------------------------------------------------------------\n";
if ( $passes[4]->[0] > 0 ) {
    &printMultiSummary("PASS",\@passes);
}
if ( $fails[4]->[0] > 0 ) {
    &printMultiSummary("FAIL",\@fails);
}
&printMultiSummary("TOTAL",\@totals);
print "\n\n--------------------------------------------------------------------------------------------------------------\n";


sub printSNPSummary {
    my ($key,$r) = @_;
    my ($a,$b,$c,$d,$e,$f,$g,$h) = @{$r->[2]};
    my $s = $a+$b+$c+$d+$e+$f+$g+$h;
    #print STDERR "$key\t$r->[0]\t$s\t".join("\t",@{$r->[2]})."\n" if ( $key eq "TOTAL" );
    print sprintf("%20s",$key)."\t".($r->[0])."\t".($r->[1])."\t".sprintf("%.1lf",$r->[1]*100/($r->[0]+1e-10));
    print ( ($a+$b+$c+$d > 0) ? sprintf("\t%.1lf",($c+$d)/($a+$b+$c+$d)*100) : "\tNA");
    print ( ($e+$f+$g+$h > 0) ? sprintf("\t%.1lf",($g+$h)/($e+$f+$g+$h)*100) : "\tNA");
    print ( ($b+$d == 0) ? "\tNA" : sprintf("\t%.2lf",($a+$c)/($b+$d)) );
    print ( ($f+$h == 0) ? "\tNA" : sprintf("\t%.2lf",($e+$g)/($f+$h)) );
    print ( ($b == 0) ? "\tNA" : sprintf("\t%.2lf",($a)/($b)) );
    print ( ($f == 0) ? "\tNA" : sprintf("\t%.2lf",($e)/($f)) );
    printf("\t%.3lf",100*($r->[3]/($nFNR+1e-6)));
    printf("\t%.3lf\n",100*($r->[3]/($r->[0]+1e-6)));
}

sub printIndelSummary {
    my ($key,$r) = @_;
    my ($a,$b) = @{$r->[4]};
    #print STDERR "$key\t$r->[0]\t$s\t".join("\t",@{$r->[2]})."\n" if ( $key eq "TOTAL" );
    if ( $a > 0 ) {
	print sprintf("%20s",$key)."\t".($a)."\t".($b)."\t".sprintf("%.1lf",$b*100/($a+1e-10));
	print "\n";
    }
}

sub printMultiSummary {
    my ($key,$r) = @_;
    my ($a,$b) = @{$r->[5]};
    #print STDERR "$key\t$r->[0]\t$s\t".join("\t",@{$r->[2]})."\n" if ( $key eq "TOTAL" );
    if ( $a > 0 ) {
	print sprintf("%20s",$key)."\t".($a)."\t".($b)."\t".sprintf("%.1lf",$b*100/($a+1e-10));
	print "\n";
    }
}

sub getCpGs {
    my ($chr,$beg,$end) = @_;
    my @seqs = split(//,uc(&readFasta($chr,$beg-1,$end+1)));
    my @cpgs = ();
    for(my $i=1; $i < $#seqs; ++$i) {
	if ( ( ( $seqs[$i] eq "C" ) && ( $seqs[$i+1] eq "G" ) ) ||
	     ( ( $seqs[$i-1] eq "C" ) && ( $seqs[$i] eq "G" ) ) ) {
	    push(@cpgs,1);
	}
	elsif ( $seqs[$i] =~ /^[ACGT]$/ ) {
	    push(@cpgs,0);
	}
	else {
	    push(@cpgs,-1);
	}
    }
    return (\@cpgs);
}

sub initRef {
    my $ref = shift;

    unless ( %hszchrs ) {
	%hszchrs = ();
	$ref = "/data/local/ref/karma.ref/human.g1k.v37.fa" unless ( defined($ref) );
	open(REF,"$ref.fai") || die "Cannot open file $ref.fai\n";
	while(<REF>) {
	    my ($chrom,$base,$startbyte,$basesperline,$bytesperline) = split;
	    $hszchrs{$chrom} = [$startbyte,$basesperline,$bytesperline];
	}
	close REF;
	
	open(FASTA,$ref) || die "Cannot open file $ref\n";
    }
}

sub readFasta {
    my ($chr,$beg,$end) = @_;

    &initRef($ref);

    #$chr =~ s/^chr//;
    my ($startbyte,$basesperline,$bytesperline) = @{$hszchrs{$chr}};
    my $byteoffset = ($startbyte + int($beg/$basesperline)*$bytesperline + ( $beg % $basesperline ) - 1 );
    seek(FASTA,$byteoffset,0);
    my $pos = 0;
    my $bp = $beg;
    my $seq = "";
    while( $bp <= $end ) {
	my $line = <FASTA>;
	chomp $line;
	my $l = length($line);
	if ( $bp + $l <= $end ) {
	    $seq .= $line;
	    $bp += $l;
	}
	else {
	    $seq .= substr($line,0,$end-$bp+1);
	    $bp = $end+1;
	}
    }
    return ($seq);
 }
