#!/usr/bin/perl -w

use strict;
use FindBin;
use lib $FindBin::Bin;
use wGetOptions qw(wpod2usage wGetOptions);    
use hyunlib qw(makeMake forkExecWait zopen wopen);

my @ins = ();
my $list = "";
my $out = "-";
my @keyCols = ();
my @skipCols = ();
my $nheaders = 1;
my $lenient = "";
my $sparse = "";

wGetOptions(
    "-Merge multiple TSV files by summing up each individual items",
    "--Key Options",
    "in=s" => [\@ins, "Input filesn with wildcard form"],
    "list=s" => [\$list, "Input file containing the list of all input files"],    
    "out=s" => [\$out, "Output file"],
    "key-col=i" => [\@keyCols, "Column containing the key info"],
    "skip-cols=i" => [\@skipCols, "Skip specific columns not to add together"],
    "nheaders=i" => [\$nheaders, "Number of header lines"],
    "lenient" => [\$lenient, "Skip rigourus format checking"],
    "sparse" => [\$sparse, "Use sparse mode which is memory-efficient with there are many zeros"],
    ) || wpod2usage(2);

if ( ( ($#ins < 0) && ( !$list ) ) || ( ($#ins >= 0) && ( $list ) ) || ( $#keyCols < 0 ) ) {
    print STDERR "Missing required options : --key-col ($#keyCols+1) + EITHER --in ($#ins+1) OR --list ($list) \n";
    wpod2usage();
}

my @infiles = ();

if ( $#ins >= 0 ) {
    foreach my $in (@ins) {
	push(@infiles,glob($in));
    }
}
elsif ( $list ) {
    open(IN,$list) || die "Cannot open $list for reading\n";
    while(<IN>) {
	chomp;
	push(@infiles,$_);
    }
    close IN;
}
else {
    die;
}

my %hskip = ();
my %hkey = ();
foreach my $c (@skipCols) { $hskip{$c-1} = 1; }
foreach my $c (@keyCols)  { $hkey{$c-1} = 1; }
my $ncols = 0;

my %h = ();
my @hdrs = ();
for(my $i=0; $i < @infiles; ++$i) {
    print STDERR "Processing $infiles[$i]..\n";

    if ( $infiles[$i] =~ /\.gz$/ ) {
	die "Cannot open $infiles[$i] for reading\n" unless ( -s $infiles[$i] );
	open(IN,"zcat $infiles[$i]|") || die "Cannot open $infiles[$i] for reading\n";	
    }
    else {
	open(IN,$infiles[$i]) || die "Cannot open $infiles[$i] for reading\n";
    }
    for(my $j=0; $j < $nheaders; ++$j) {
	my $line = <IN>;
	if ( $i == 0 ) {
	    push(@hdrs,$line);
	}
	else {
	    die "Header line $j do not match in $infiles[$i]\n" unless ( ( $hdrs[$j] eq $line ) || ( $lenient ) );
	}
    }
    while(<IN>) {
	my @F = split;
	if ( $ncols == 0 ) { $ncols = $#F+1; }
	elsif ( $ncols != $#F + 1 ) { die "Number of columns do not match"; }
	
	my %hlocal = ();
	my $key;
	for(my $j=0; $j < @keyCols; ++$j) {
	    die "Column $keyCols[$j] cannot be found in $infiles[$i]\n" if ( $keyCols[$j] > @F );
	    $key = ($j == 0) ? $F[$keyCols[$j]-1] : $key."\t".$F[$keyCols[$j]-1];
	}
	if ( defined($hlocal{$key}) ) {
	    die "Observed key [$key] more than once in the same file. Make sure that the key is unique\n";
	}
	$hlocal{$key} = 1;

	if ( defined($h{$key}) ) {
	    my $r = $h{$key};
	    for(my $j=0; $j < @F; ++$j) {
		if ( $hskip{$j} ) {
		    die "Skipped column $j are not identical at $infiles[$i]\n" unless ( ( $r->[$j] eq $F[$j] ) || ( $lenient ) );
		}
		elsif ( ( !$hkey{$j} ) && ( $F[$j] > 0 ) ) {
		    if ( $sparse ) {
			$r->{$j} += $F[$j];
		    }
		    else {
			$r->[$j] += $F[$j];
		    }
		}
	    } 
	}
	else {
	    if ( $sparse ) {
		my %htmp = ();
		for(my $j=0; $j < @F; ++$j) {
		    if ( ( !$hkey{$j} ) && ( $F[$j] > 0 ) ) {
			$htmp{$j} = $F[$j];
		    }
		}
		$h{$key} = \%htmp;
	    }
	    else {
		$h{$key} = \@F;
	    }
	}
    }
    close IN;
}

my $fh = wopen($out);
for(my $i=0; $i < @hdrs; ++$i) {
    print {$fh} $hdrs[$i];
}
foreach my $key (sort keys %h) {
    if ( $sparse ) {
	my @a = (0) x $ncols;
	my @keys = split(/\t/,$key);
	for(my $i=0; $i < @keyCols; ++$i) {
	    $a[$keyCols[$i]-1] = $keys[$i];
	}
	my $r = $h{$key};
	foreach my $i (keys %{$r}) {
	    $a[$i] = $r->{$i};
	}
	print {$fh} join("\t",@a)."\n";	
    }
    else {
	print {$fh} join("\t",@{$h{$key}})."\n";
    }
}
$fh->close();
