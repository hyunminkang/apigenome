#!/usr/bin/perl -w

use strict;
use Time::HiRes qw(usleep nanosleep);
use File::Path;
use File::Basename;
use FindBin;
use lib $FindBin::Bin;
use wGetOptions qw(wpod2usage wGetOptions);
use hyunlib qw(%hszchrs initRef forkExecWait);

my $invcf = "";    # One input VCF file
my $vcflist = "";  # List containing input VCF files
my $outprefix = "";
my $ref = "";
my $dbsnp = "";
my $modelf = "";
my $train = "";
my @posVcfs = ();
my $negVcf = ();
my @negFilts = ();
#my $transferFilter = "";

my @ignores = qw(AC AN AF GC GN HWEAF_P MAX_IF MIN_IF);
my @includes = ();
my $cutoff = 0.2;
my $matchAC = "";

my $bintabix = "tabix";
my $binbcftools = "bcftools";
my $binbgzip = "bgzip";
my $invNorm = "";
my $svmlearn = "svm-train";
my $svmclassify = "svm-predict";
my $vcfsummary = "$FindBin::Bin/vcf-summary";
my $vcfsummary2 = "$FindBin::Bin/vcf-summary-v2";
my $xLabel = "chrX";
my ($xStart,$xStop) = (2781479,155701383);
my $centromereBed = "";

wGetOptions(
    "-Find duplicate samples from merged site list",
    "--Required Options",
    "in-vcf=s" => [\$invcf, "Input VCF file"],
    "out=s"    => [\$outprefix, "Output prefix"],    
    "ref=s"   => [\$ref,   "Reference FASTA file"],
    "dbsnp=s" => [\$dbsnp, "Path to dbSNP file"],
    "posvcf=s" => [\@posVcfs, "VCF containing positive labels"],
    "negvcf=s" => [\$negVcf, "VCF containing negative labels"],
    "negfilt=s" => [\@negFilts, "FILTER columns to be considered as negative labels (DISC, EXHET)"],
    "match-AC"  => [\$matchAC,  "Match the distribution of AC between positive and negative labels"],
#    "transfer-filter" => [\$transferFilter, "Transfer filters from the negative label VCF whenever available"],
    
    "--Additional Options",
    "model=s" => [\$modelf, "Model file already trained"],    
    "train"   => [\$train,  "Perform model training (create a model file [outprefix].model)"],
    "ignore=s" => [\@ignores, "INFO field to ignore in the training steps"],
    "include=s" => [\@includes, "INFO field to always include in the training steps ',defaultValue' are appended when default value is non-zero"],
    "cutoff=f"  => [\$cutoff, "SVM cutoff value to PASS a variant"],
    "centromere=s" => [\$centromereBed, "A BED file containing the centromere information"],
    
    "--Required Software Tools",    
    "invNorm=s" => [\$invNorm, "Path to binary of invNorm software tool"],
    "svm-train=s" => [\$svmlearn, "Path to binary of libsvm's svm-learn tool"],
    "svm-predict=s" => [\$svmclassify, "Path to binary of libsvm's svm-predict tool"],
    "bgzip=s" => [\$binbgzip, "Path to binary of bgzip tool"],
    "tabix=s" => [\$bintabix, "Path to binary of tabix tool"],
    "bcftools=s" => [\$binbcftools, "Path to binary of bcftools tool"],    
    "vcf-summary=s" => [\$vcfsummary, "Path to vcf-summary tool"],
    "vcf-summary2=s" => [\$vcfsummary2, "Path to vcf-summary-v2 tool"],

    "--Sex Chromosomes",
    "xLabel=s" => [\$xLabel, "Label of X chromosome"],
    "xStart=i" => [\$xStart, "Base position of the beginning of non-PAR X region"],  
    "xStop=i" => [\$xStop,   "Base position of the end of non-PAR X region"],
    ) || wpod2usage(2);

unless ( ( $invcf ) && ( $outprefix ) && ( $ref ) && ( $dbsnp ) && ( $#posVcfs >= 0 ) && ( $negVcf ) && ( $#negFilts >= 0 ) && ($invNorm) && ( $svmlearn) && ( $svmclassify ) && ( $binbgzip ) && ( $bintabix ) && ( $binbcftools) && ( $vcfsummary ) && ( $vcfsummary2 ) ) {
    print STDERR "ERROR: Missing required option\n";
    wpod2usage(2);
}

&initRef($ref);

my %hcent = ();
if ( $centromereBed ) {
    if ( $centromereBed =~ /\.gz/ ) {
	open(IN,"zcat $centromereBed |") || die "Cannot open file $centromereBed\n";
    }
    else {
	open(IN,$centromereBed) || die "Cannot open file $centromereBed\n";	
    }
    while(<IN>) {
	my ($chr,$beg,$end) = split;
	$hcent{$chr} = [$beg,$end];
    }
    close IN;
}
else {
    print STDERR "WARNING: Centromere BED file was not specified. No CEN filter will be provided\n";
}

my @names = ();
my $ncols = 0;
my %hIgnores = map { $_ => 1 } @ignores;
my %hIncludes = ();
my @includeKeys = ();
my @includeDefaultValues = ();
for(my $i=0; $i < @includes; ++$i) {
    my ( $key, $defaultVal ) = split(/,/,$includes[$i]);
    $hIncludes{$key} = $i;
    push(@names,$key);
    push(@includeKeys,$key);
    push(@includeDefaultValues,defined($defaultVal) ? $defaultVal : 0);
}
my $nIncludes = $#includes + 1;

## Check if model need to be created

unless ( $modelf ) {
    $modelf = "$outprefix.svm.model";
}

die "ERROR: Input VCF $invcf must be indexed \n" unless ( ( -s "$invcf.tbi" ) || ( -s "$invcf.csi" ) );

my $chr = `$binbcftools index -s $invcf | cut -f 1`;
#my $chr = `$bintabix -l $invcf`;
chomp $chr;
my @achrom = split(/\s+/,$chr);
die "ERROR: Cannot handle VCF that contains multiple chromosomes. Pleasem separate by indvidual chromosome\n" if ( $#achrom > 0 );

if ( $train ) {
    my %hneg = ();
    my %hNegFilts = ();
    foreach my $negFilt (@negFilts) { $hNegFilts{$negFilt} = 1; }

    print STDERR "Identifying negative labels...\n";
    ## LABEL negative samples
    
    print STDERR "Reading $negVcf...\n";		
    #open(IN,"$bintabix $negVcf $chr:0 | ") || die "Cannot open file\n";
    open(IN,"$binbcftools view $negVcf $chr:0- | grep -v ^# | grep -v -w PASS |") || die "Cannot open file $negVcf\n";
    while(<IN>) {
	#print STDERR $_;
	if ( /^#/ ) {
	}
	else {
	    my ($chrom,$pos,$id,$ref,$alt,$qual,$filt) = split;
	    print STDERR "Reading $. lines at $chrom:$pos from $negVcf\n" if ( $. % 100000 == 0);
	    
	    next if ( $filt eq "PASS" );
	    
	    my @filts = split(/;/,$filt);
	    my $filtMatch = 0;
	    foreach my $filt (@filts) {
		$filtMatch = 1 if ( defined($hNegFilts{$filt}) );
	    }

	    #print STDERR "@filts $filtMatch\n";
		
	    $hneg{"$chrom:$pos:$ref:$alt"} = \@filts if ( $filtMatch == 1 );
	    #$hfail{"$chrom:$pos:$ref:$alt"} = \@filts;
	}
    }
    close IN;
    
    die "FATAL ERROR: Negative examples are empty. negFilts = @negFilts\n" if ( scalar keys %hneg == 0 );
    print STDERR "Loaded a total of ".(scalar keys %hneg)." negative examples\n";
    
    print STDERR "WARNING: The existing model $modelf will be overwritten\n" if ( -s $modelf );
    print STDERR "Creating SVM model for $modelf first..\n";

    my %hpos = ();
    print STDERR "Loading positive labels..\n";
    ## LABEL positive samples
    foreach my $posVcf (@posVcfs) {
	print STDERR "Reading $posVcf...\n";	
        #open(IN,"$bintabix $posVcf $chr:0 | grep -w PASS |") || die "Cannot open file\n";
        open(IN,"$binbcftools view $posVcf $chr:0- | grep -w PASS |") || die "Cannot open file $posVcf\n";	
        while(<IN>) {
            next if ( /^#/ );
            my ($chrom,$pos,$id,$ref,$alt) = split;
	    print STDERR "Reading $. lines at $chrom:$pos from $posVcf\n" if ( $. % 100000 == 0);	    
            $hpos{"$chrom:$pos"} = "$ref:$alt";
        }
	close IN;
    }

    die "FATAL ERROR: Negative examples are empty\n" if ( scalar keys %hpos == 0 );
    print STDERR "Loaded a total of ".(scalar keys %hpos)." positive examples\n";    
    
    my ($cbeg,$cend) = @{$hcent{$chr}};

    if ( $matchAC ) {
	## perform importance sampling based on AC
	## Use first two digits in log scale to get the histogram
	my %posAC = ();
	my %negAC = ();

	my $log10 = log(10);
	print STDERR "Matching the distributions of ACs..\n";
	my ($npos, $nneg) = 0;
	open(IN,"$binbcftools view $invcf |") || die "Cannot open file $invcf\n";
	while(<IN>) {
	    next if ( /^#/ );
	    my ($chrom,$pos,$id,$ref,$alt,$qual,$filt,$info) = split(/[ \t\r\n]+/);
	    my $ac = $1 if ( $info =~ /;AC=(\d+)/ );
	    next if ( $ac == 0 );
	    my $acbin = sprintf("%d",log($ac)/$log10*10);
	    if ( defined($hpos{"$chrom:$pos"}) ) {      
		if ( ( $hpos{"$chrom:$pos"} ne "$ref:$alt" ) || defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
		}
		else {
		    $posAC{$acbin} = 0 unless ( defined($posAC{$acbin}) );
		    ++($posAC{$acbin});
		    ++$npos;
		}
	    }
	    elsif ( defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
		$negAC{$acbin} = 0 unless ( defined($negAC{$acbin}) );
		++($negAC{$acbin});
		++$nneg;
	    }
	}
	close IN;

	print STDERR "Before - Positive labels: $npos, Negative labels: $nneg\n";

	$nneg = 0;
	print STDERR "Re-reading $invcf to match the AC distribution of labels..\n";
	open(IN,"$binbcftools view $invcf |") || die "Cannot open file $invcf\n";
	while(<IN>) {
	    next if ( /^#/ );
	    my ($chrom,$pos,$id,$ref,$alt,$qual,$filt,$info) = split(/[ \t\r\n]+/);
	    my $ac = $1 if ( $info =~ /;AC=(\d+)/ );
	    if ( $ac == 0 ) {
		if ( defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
		    delete $hneg{"$chrom:$pos:$ref:$alt"};		    
		}
		if ( ( defined($hpos{"$chrom:$pos"}) ) && ( $hpos{"$chrom:$pos"} eq "$ref:alt" ) ) {
		    delete $hpos{"$chrom:$pos"};
		}
		next;
	    }
	    my $acbin = sprintf("%d",log($ac)/$log10*10);
	    if ( defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
		if ( defined($posAC{$acbin}) ) {
		    my $prob = ( $posAC{$acbin} > $negAC{$acbin} ) ? 1 : $posAC{$acbin}/$negAC{$acbin};
		    if ( rand() > $prob ) { ## remove
			delete $hneg{"$chrom:$pos:$ref:$alt"};
		    }
		    else {
			++$nneg;
		    }
		}
		else {
		    delete $hneg{"$chrom:$pos:$ref:$alt"};		    
		}
	    }
	}
	close IN;

	print STDERR "After - Positive labels: $npos, Negative labels: $nneg\n";	
    }


    ## write features
    print STDERR "Writing the feature information for libsvm..\n";
    open(RAW,">$outprefix.raw") || die "Cannot open $outprefix.raw for writing\n";
    open(SITE,">$outprefix.site") || die "Cannot open $outprefix.raw for writing\n";
    open(IN,"$binbcftools view $invcf |") || die "Cannot open file $invcf\n";
    my @hdrs = ();
    while(<IN>) {
        if ( /^#/ ) {
            push(@hdrs,$_);	    
            next;
        }
        my ($chrom,$pos,$id,$ref,$alt,$qual,$filt,$info) = split(/[ \t\r\n]+/);
        #$info .= ";QUAL=$qual" unless ( $qual eq "." );
        my @infos = split(/;/,$info);
        my @values = ();
        my $k = 0;
        for(my $j=0; $j < @includeKeys; ++$j) {
            push(@values,$includeDefaultValues[$j]);
            ++$k;
        }           
        
        for(my $j=0; $j < @infos; ++$j) {
            my ($key,$val) = split(/=/,$infos[$j]);
            next if ( defined($hIgnores{$key}) );
            next unless defined($val); ## skip keys without any values
            if ( defined($hIncludes{$key}) ) {
                if ($val =~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/) {
                    $values[$hIncludes{$key}] = $val;
		}
            }
            else {
                if ( $val =~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/ ) {
                    push(@values,$val);
                }
                else {
                    push(@values,0);
                }
                
                if ( $ncols == 0 ) {
                    push(@names,$key);
                }
                else {
                    die "Cannot recognize $key in $infos[$j], supposed to be $names[$j] at $j, $chrom:$pos:$ref:$alt $info\n" unless ($names[$k] eq $key );
                }
                ++$k;
            }
        }
        if ( $ncols == 0 ) {
            $ncols = $#names+1;
            print STDERR "Recording following $ncols features : @names\nThe info field was $info\n@infos\n";
            die if ( $ncols == 0 );
        }
        elsif ( $ncols != $#values+1 ) {
            die "Number of columns are not identical at $chrom:$pos:$ref:$alt\n";
        }
        print SITE join("\t",$chrom,$pos,$id,$ref,$alt,$qual,$filt,$info)."\n";     
        print RAW join("\t",@values)."\n";
    }
    close IN;
    close RAW;
    close SITE;

    print STDERR "Performing quantile normalization of features..\n";    
    my $cmd = "$invNorm --in $outprefix.raw --out $outprefix.norm";
    &forkExecWait($cmd);

    open(SITE,"$outprefix.site") || die "Cannot open $outprefix.sites\n";
    open(NORM,"$outprefix.norm") || die "Cannot open $outprefix.norm\n";
    open(LBL,">$outprefix.label") || die "Cannot open $outprefix.label\n";

    my ($npos,$nneg,$noth) = (0,0,0);
    while(<SITE>) {
        my ($chrom,$pos,$id,$ref,$alt) = split;
        my @z = split(/[ \t\r\n]+/,<NORM>);
        my $ln = "";
        for(my $i=0; $i < @names; ++$i) {
            $ln .= " ".($i+1).":$z[$i]";
        }
        if ( defined($hpos{"$chrom:$pos"}) ) {      
            if ( ( $hpos{"$chrom:$pos"} ne "$ref:$alt" ) || defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
                ++$noth;
            }
            else {
                print LBL "1 $ln\n";
                ++$npos;
            }
        }
        elsif ( defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
            print LBL "-1 $ln\n";
            ++$nneg;
        }
        else {
            ++$noth;
        }
    }
    #close FTR;
    close LBL;
    close SITE;
    close NORM;

    print STDERR "Training SVM classification model using $npos positive samples, $nneg negative samples with $noth additional samples\n";

    $cmd = "$svmlearn -b 1 -s 0 -t 2 $outprefix.label $modelf";
    &forkExecWait($cmd);
}

## make a new training model for X chromosomes
if ( $chr eq $xLabel ) {
    ## develop a new training model, focused only on non-PAR
    my %hpos = ();
    my %hneg = ();
    my %hNegFilts = ();
    foreach my $negFilt (@negFilts) { $hNegFilts{$negFilt} = 1; }

    print STDERR "Identifying negative labels...\n";
    ## LABEL negative samples
    
    print STDERR "Reading $negVcf...\n";		
    #open(IN,"$bintabix $negVcf $chr:0 | ") || die "Cannot open file\n";
    open(IN,"$binbcftools view $negVcf $chr:0- | grep -v ^# | grep -v -w PASS |") || die "Cannot open file $negVcf\n";    
    while(<IN>) {
	#print STDERR $_;
	if ( /^#/ ) {
	}
	else {
	    my ($chrom,$pos,$id,$ref,$alt,$qual,$filt) = split;
	    print STDERR "Reading $. lines at $chrom:$pos from $negVcf\n" if ( $. % 100000 == 0);
	    
	    next if ( $filt eq "PASS" );
	    
	    my @filts = split(/;/,$filt);
	    my $filtMatch = 0;
	    foreach my $filt (@filts) {
		$filtMatch = 1 if ( defined($hNegFilts{$filt}) );
	    }
	    $hneg{"$chrom:$pos:$ref:$alt"} = \@filts if ( $filtMatch == 1 );
	}
    }
    close IN;    
    
    print STDERR "Loading positive labels..\n";
    ## LABEL positive samples
    foreach my $posVcf (@posVcfs) {
	open(IN,"$binbcftools view $posVcf $xLabel:$xStart-$xStop | grep -w PASS |") || die "Cannot open file $posVcf\n";
	while(<IN>) {
	    next if ( /^#/ );
	    my ($chrom,$pos,$id,$ref,$alt) = split;
	    next if ( $pos < $xStart );
	    next if ( $pos > $xStop );              
	    $hpos{"$chrom:$pos"} = "$ref:$alt";
	}
    }
    my ($cbeg,$cend) = @{$hcent{$xLabel}};

    if ( $matchAC ) {
	## perform importance sampling based on AC
	## Use first two digits in log scale to get the histogram
	my %posAC = ();
	my %negAC = ();

	my $log10 = log(10);
	print STDERR "Matching the distributions of ACs..\n";
	my ($npos, $nneg) = 0;
	open(IN,"$binbcftools view $invcf $xLabel:$xStart-$xStop |") || die "Cannot open file $invcf\n";
	while(<IN>) {
	    next if ( /^#/ );
	    my ($chrom,$pos,$id,$ref,$alt,$qual,$filt,$info) = split(/[ \t\r\n]+/);
	    my $ac = $1 if ( $info =~ /;AC=(\d+)/ );
	    next if ( $ac == 0 );
	    my $acbin = sprintf("%d",log($ac)/$log10*10);
	    if ( defined($hpos{"$chrom:$pos"}) ) {      
		if ( ( $hpos{"$chrom:$pos"} ne "$ref:$alt" ) || defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
		}
		else {
		    $posAC{$acbin} = 0 unless ( defined($posAC{$acbin}) );
		    ++($posAC{$acbin});
		    ++$npos;
		}
	    }
	    elsif ( defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
		$negAC{$acbin} = 0 unless ( defined($negAC{$acbin}) );
		++($negAC{$acbin});
		++$nneg;
	    }
	}
	close IN;

	print STDERR "Before - Positive labels: $npos, Negative labels: $nneg\n";

	$nneg = 0;
	print STDERR "Re-reading $invcf to match the AC distribution of labels..\n";
	open(IN,"$binbcftools view $invcf $xLabel:$xStart-$xStop |") || die "Cannot open file $invcf\n";
	while(<IN>) {
	    next if ( /^#/ );
	    my ($chrom,$pos,$id,$ref,$alt,$qual,$filt,$info) = split(/[ \t\r\n]+/);
	    my $ac = $1 if ( $info =~ /;AC=(\d+)/ );
	    if ( $ac == 0 ) {
		if ( defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
		    delete $hneg{"$chrom:$pos:$ref:$alt"};		    
		}
		if ( ( defined($hpos{"$chrom:$pos"}) ) && ( $hpos{"$chrom:$pos"} eq "$ref:alt" ) ) {		
		    delete $hpos{"$chrom:$pos"};
		}		
		next;
	    }	    
	    my $acbin = sprintf("%d",log($ac)/$log10*10);
	    if ( defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
		if ( defined($posAC{$acbin}) ) {
		    my $prob = ( $posAC{$acbin} > $negAC{$acbin} ) ? 1 : $posAC{$acbin}/$negAC{$acbin};
		    if ( rand() > $prob ) { ## remove
			delete $hneg{"$chrom:$pos:$ref:$alt"};
		    }
		    else {
			++$nneg;
		    }
		}
		else {
		    delete $hneg{"$chrom:$pos:$ref:$alt"};		    
		}
	    }
	}
	close IN;

	print STDERR "After - Positive labels: $npos, Negative labels: $nneg\n";	
    }    

    print STDERR "Writing the feature information for libsvm..\n";
    open(RAWPAR,">$outprefix.rawPAR") || die "Cannot open $outprefix.raw for writing\n";
    open(RAWX,">$outprefix.rawX") || die "Cannot open $outprefix.raw for writing\n";
    open(SITE,">$outprefix.site") || die "Cannot open $outprefix.sitePAR for writing\n";
    open(IN,"$binbcftools view $invcf |") || die "Cannot open file $invcf\n";
    my @hdrs = ();
    while(<IN>) {
	if ( /^#/ ) {
	    push(@hdrs,$_);
	    next;
	}
	my ($chrom,$pos,$id,$ref,$alt,$qual,$filt,$info) = split(/[ \t\r\n]+/);
	
	#$info .= ";QUAL=$qual" unless ( $qual eq "." );
	my @infos = split(/;/,$info);
	my @values = ();
	my $k = 0;
	for(my $j=0; $j < @includeKeys; ++$j) {
	    push(@values,$includeDefaultValues[$j]);
	    ++$k;
	}       
	
	for(my $j=0; $j < @infos; ++$j) {
	    my ($key,$val) = split(/=/,$infos[$j]);
	    next if ( defined($hIgnores{$key}) );
	    next unless defined($val); ## skip keys without any values
	    if ( defined($hIncludes{$key}) ) {
		if ($val =~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/ ) {
		    $values[$hIncludes{$key}] = $val; # set value if given
		}
	    }
	    else {
		if ( $val =~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/ ) {
		    push(@values,$val);
		}
		else {
		    push(@values,0);
		}
		
		if ( $ncols == 0 ) {
		    push(@names,$key);
		}
		else {
		    die "Cannot recognize $key in $infos[$j], supposed to be $names[$j] at $j, $chrom:$pos:$ref:$alt $info\n" unless ($names[$k] eq $key );
		}
		++$k;
	    }
	}
	if ( $ncols == 0 ) {
	    $ncols = $#names+1;
	    print STDERR "Recording following $ncols features : @names\nThe info field was $info\n@infos\n";
	    die if ( $ncols == 0 );
	}
	elsif ( $ncols != $#values+1 ) {
	    die "Number of columns are not identical at $chrom:$pos:$ref:$alt\n";
	}
	
	print SITE join("\t",$chrom,$pos,$id,$ref,$alt,$qual,$filt,$info)."\n";                 
	if ( ( $pos < $xStart ) || ( $pos > $xStop ) ) {
	    print RAWPAR join("\t",@values)."\n";
	}
	else {
	    print RAWX join("\t",@values)."\n";             
	}
    }
    close IN;
    close RAWX;
    close RAWPAR;   
    close SITE;
    
    print STDERR "Performing quantile normalization of features..\n";    
    my $cmd = "$invNorm --in $outprefix.rawX --out $outprefix.normX";
    &forkExecWait($cmd);
    $cmd = "$invNorm --in $outprefix.rawPAR --out $outprefix.normPAR";
    &forkExecWait($cmd);    
    
    open(SITE,"$outprefix.site") || die "Cannot open $outprefix.sites\n";
    open(NORMX,"$outprefix.normX") || die "Cannot open $outprefix.normX\n";
    open(LBLX,">$outprefix.labelX") || die "Cannot open $outprefix.labelX\n";
    
    my ($npos,$nneg,$noth) = (0,0,0);
    while(<SITE>) {
	my ($chrom,$pos,$id,$ref,$alt) = split;
	next if ( $pos < $xStart );
	next if ( $pos > $xStop );      
	my @z = split(/[ \t\r\n]+/,<NORMX>);
	my $ln = "";
	for(my $i=0; $i < @names; ++$i) {
	    $ln .= " ".($i+1).":$z[$i]";
	}
	if ( defined($hpos{"$chrom:$pos"}) ) {          
	    if ( ( $hpos{"$chrom:$pos"} ne "$ref:$alt" ) || defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
		++$noth;
	    }
	    else {
		print LBLX "1 $ln\n";
		++$npos;
	    }
	}
	elsif ( defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
	    print LBLX "-1 $ln\n";
	    ++$nneg;
	}
	else {
	    ++$noth;
	}
    }
    close LBLX;
    close SITE;
    close NORMX;
    
    print STDERR "Training SVM classification model using $npos positive samples, $nneg negative samples with $noth additional samples\n";
    
    $cmd = "$svmlearn -b 1 -s 0 -t 2 $outprefix.labelX $modelf.X";
    &forkExecWait($cmd);


    ### After training, create predictions for PAR and nonPAR seperately,
    
    open(SITE,"$outprefix.site") || die "Cannot open $outprefix.sites\n";
    open(NORMX,"$outprefix.normX") || die "Cannot open $outprefix.norm\n";
    open(NORMPAR,"$outprefix.normPAR") || die "Cannot open $outprefix.norm\n";  
    open(FTRX,">$outprefix.featureX") || die "Cannot open $outprefix.feature\n";
    open(FTRPAR,">$outprefix.featurePAR") || die "Cannot open $outprefix.feature\n";    
    
    #my ($npos,$nneg,$noth) = (0,0,0);
    while(<SITE>) {
	my ($chrom,$pos,$id,$ref,$alt) = split;
	if ( ( $pos < $xStart ) || ( $pos > $xStop ) ) {
	    my @z = split(/[ \t\r\n]+/,<NORMPAR>);
	    my $ln = "";
	    for(my $i=0; $i < @names; ++$i) {
		$ln .= " ".($i+1).":$z[$i]";
	    }
	    print FTRPAR "0 $ln\n";
	    ++$noth;
	}
	else {
	    my @z = split(/[ \t\r\n]+/,<NORMX>);
	    my $ln = "";
	    for(my $i=0; $i < @names; ++$i) {
		$ln .= " ".($i+1).":$z[$i]";
	    }
	    print FTRX "0 $ln\n";
	    ++$noth;                
	}
    }
    close FTRX;
    close FTRPAR;
    close NORMX;
    close NORMPAR;          
    close SITE;
    
    print STDERR "Applying trained SVM model on $noth variants\n";
    
    $cmd = "$svmclassify -b 1 $outprefix.featurePAR $modelf $outprefix.svm.predPAR";
    &forkExecWait($cmd);
    $cmd = "$svmclassify -b 1 $outprefix.featureX $modelf.X $outprefix.svm.predX";
    &forkExecWait($cmd);

    ## open negative VCFs
    my @extFilts = ();
    my %extHdrs = ();
    open(EXT, "$binbcftools view $negVcf $chr:0- | ") || die "Cannot open file $negVcf\n";
    my $extPos = 0;
    while(<EXT>) {
	if ( /^#/ ) {
	    if ( /^##FILTER=<ID=([^,]+),/ ) {
		$extHdrs{$1} = $_;
	    }
	}
	else {
	    my ($chrom,$pos,$id,$ref,$alt,$qual,$filt) = split;		
	    #next if ( $filt eq "PASS" );
	    my @filts = split(/;/,$filt);
	    push(@extFilts,[$chrom,$pos,$ref,$alt,\@filts]);
	    $extPos = $pos;
	    last;
	}
    }        
        
    print STDERR "Writing filtered site VCF files with SVM scores..\n";
    open(SITE,"$outprefix.site") || die "Cannot open $outprefix.sites\n";    
    open(PREDX,"$outprefix.svm.predX") || die "Cannot open $outprefix.svm.pred file\n";
    open(PREDPAR,"$outprefix.svm.predPAR") || die "Cannot open $outprefix.svm.pred file\n";     
    open(OUT,"| $binbgzip -c > $outprefix.sites.vcf.gz") || die "Cannot open $outprefix.sites.vcf.gz\n";

    splice(@hdrs,$#hdrs,0,"##INFO=<ID=SVM,Number=1,Type=Float,Description=\"SVM score for variant quality, passing $cutoff or greater\">\n");
    splice(@hdrs,$#hdrs,0,"##INFO=<ID=OVERLAP,Number=.,Type=String,Description=\"Overlap with possible variant types\">\n");
    splice(@hdrs,$#hdrs,0,"##FILTER=<ID=CEN,Description=\"Variant overlaps with centromeric region\">\n") unless ( defined($extHdrs{"CEN"}) );
    splice(@hdrs,$#hdrs,0,"##FILTER=<ID=EXTSVM,Description=\"Variant failed SVM filter from externally provided VCF\">\n") unless ( defined($extHdrs{"EXTSVM"}) );
    splice(@hdrs,$#hdrs,0,"##FILTER=<ID=EXHET,Description=\"Excess heterozygosity with HWE p-value < 1e-6\"\n") unless ( defined($extHdrs{"EXHET"}) );
    splice(@hdrs,$#hdrs,0,"##FILTER=<ID=SVM,Description=\"Variant failed SVM filter from new training model\">\n") unless ( defined($extHdrs{"SVM"}) );    
    foreach my $key (keys %extHdrs) {
	splice(@hdrs,$#hdrs,0,$extHdrs{$key});
    }
    print OUT join("",@hdrs);    

    my $maxan = 0;
    my $dummy = <PREDPAR>;
    $dummy = <PREDX>;    
    
    while(<SITE>) {
	my @F = split;
	my $isX = ( ( $F[1] < $xStart ) || ( $F[1] > $xStop ) ) ? 0 : 1;    
	my $pred;
	if ( $isX == 0 ) {
	    my @preds = split(/\s+/,<PREDPAR>);
	    $pred = $preds[1];
	}
	else {
	    my @preds = split(/\s+/,<PREDX>);
	    $pred = $preds[1];	    
	}
	#chomp($pred);

	## Read from extFilts
	while( $extPos < $F[1] ) {
	    my $line = <EXT>;
	    if ( $line ) {
		my ($chrom,$pos,$id,$ref,$alt,$qual,$filt) = split(/[\t\r\n ]+/,$line);
		my @filts = split(/;/,$filt);
		for(my $i=0; $i < @filts; ++$i) {
		    $filts[$i] = "EXTSVM" if ( $filts[$i] eq "SVM" );
		}
		push(@extFilts,[$chrom,$pos,$ref,$alt,\@filts]);
		$extPos = $pos;
	    }
	    else {
		$extPos = 1e9;
	    }
	}
	my $idx = 0;
	while( ( $idx <= $#extFilts ) && ( $extFilts[$idx]->[1] < $F[1] ) ) { ++$idx; }
	splice(@extFilts,0,$idx);	
	
	my $info = $F[7];
	
	my $an = $1 if ( $F[7] =~ /;AN=(\d+)/ );
	$maxan = $an if ( $maxan < $an );
	#my $chrx = $1 if ( $F[7] =~ /MILK_CHRX=([^;]+);/ );     
	
	my $maf = $1 if ( $F[7] =~ /AF=([^;]+);/ );
	$maf = 1-$maf if ( $maf > 0.5 );
	
	my $hweslp = $1 if ( $F[7] =~ /HWE_SLP_I=([^;]+);/ );
	
	my ($cbeg,$cend) = @{$hcent{$chr}};    
	
	my @filts = ();

	## check overlaps with negative VCF
	for(my $i=0; $i < @extFilts; ++$i) {
	    my @G = @{$extFilts[$i]};
	    if ( ( $G[1] == $F[1] ) && ( $G[2] eq $F[3] ) && ( $G[3] eq $F[4] ) ) { # match found
		push(@filts,@{$G[4]});
		last;
	    }
	}

	if ( $#filts < 0 ) { # if previously unobserved
	    if ( ( $pred < $cutoff ) || ( $F[7] =~ /AC=0;/ ) ) {
		push(@filts,"SVM");
	    }
	    if ( ( $F[1] > $cbeg ) && ( $F[1] < $cend ) ) {
		push(@filts,"CEN");
	    }
	    if ( $hweslp < -13.81551 ) {
		push(@filts,"EXHET");
	    }
	}
	else {
	    if ( ( $filts[0] eq "PASS" ) && ( $F[7] =~ /AC=0;/ ) ) {
		@filts = ("SVM");
	    }
	}
	
	$F[6] = ($#filts < 0) ? "PASS" : join(';',@filts);
	$info .= ";SVM=$pred";
	print OUT join("\t",@F[0..6],$info)."\n";
    }
    close OUT;
    close PREDPAR;
    close PREDX;    
    close SITE;
    
    my @acbrs = (1,2,3);
    push(@acbrs, int($maxan*1e-6)) if ( $maxan >= 4e6 );
    push(@acbrs, int($maxan*1e-5)) if ( $maxan >= 4e5 );
    push(@acbrs, int($maxan*1e-4)) if ( $maxan >= 4e4 );
    push(@acbrs, int($maxan*1e-3)) if ( $maxan >= 4e3 );
    push(@acbrs, int($maxan*1e-2)) if ( $maxan >= 4e2 );
    push(@acbrs, int($maxan*1e-1)) if ( $maxan >= 4e1 );    
    my $acbreaks = join(",",@acbrs);
    print STDERR "Producing VCF summary for SNPs..\n";
    print STDERR "Producing VCF summary for SNPs..\n";
    open(IN,"zcat $outprefix.sites.vcf.gz|") || die "Cannot open file $outprefix.sites.vcf.gz\n";
    open(OUT2, "| $vcfsummary --ref $ref --db $dbsnp --FNRvcf $posVcfs[0] --bgzip $binbgzip --tabix $bintabix --chr $chr > $outprefix.sites.summary") || die "Cannot open file for writing\n";
    open(OUT3, "| $vcfsummary2 --ref $ref --db $dbsnp --FNRvcf $posVcfs[0] --bgzip $binbgzip --tabix $bintabix --chr $chr > $outprefix.sites.summary_v2") || die "Cannot open file for writing\n";    
    while(<IN>) {
	next if ( /^#/ );
	my @F = split;
	print OUT3 $_;
	print OUT2 $_;
    }
    close IN;
    close OUT2;
    close OUT3;     
}
else {
    print STDERR "Writing the feature information for libsvm..\n";
    open(RAW,">$outprefix.raw") || die "Cannot open $outprefix.raw for writing\n";
    open(SITE,">$outprefix.site") || die "Cannot open $outprefix.raw for writing\n";
    open(IN,"$binbcftools view $invcf |") || die "Cannot open file $invcf\n";
    
    my @hdrs = ();
    while(<IN>) {
	if ( /^#/ ) {
	    next if ( /^##PEDIGREE/ );      
	    next if ( /^##INFO=<ID=(FLT20|IBC|MILK|DUP|TRIO)/ );
	    next if ( /^##FORMAT=<ID=(LRE|LUD|BF|FAMGT)/ );
	    next if ( /^##FILTER=<ID=overlap/ );
	    next if ( /^##FILTER=<ID=PASS/ ); 	    
	    push(@hdrs,$_);
	    next;
	}
	my ($chrom,$pos,$id,$ref,$alt,$qual,$filt,$info) = split(/[ \t\r\n]+/);
	#$info .= ";QUAL=$qual" unless ( $qual eq "." );
	my @infos = split(/;/,$info);
	my @values = ();
	my $k = 0;
	for(my $j=0; $j < @includeKeys; ++$j) {
	    push(@values,$includeDefaultValues[$j]);
	    ++$k;
	}       
	
	for(my $j=0; $j < @infos; ++$j) {
	    my ($key,$val) = split(/=/,$infos[$j]);
	    next if ( defined($hIgnores{$key}) );
	    next unless defined($val); ## skip keys without any values
	    if ( defined($hIncludes{$key}) ) {
		if ($val =~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/ ) {
		    $values[$hIncludes{$key}] = $val; # set value if given
		}
	    }
	    else {
		if ( $val =~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/ ) {
		    push(@values,$val);
		}
		else {
		    push(@values,0);
		}
		
		if ( $ncols == 0 ) {
		    push(@names,$key);
		}
		else {
		    die "Cannot recognize $key in $infos[$j], supposed to be $names[$j] at $j, $chrom:$pos:$ref:$alt $info\n" unless ($names[$k] eq $key );
		}
		++$k;
	    }
	}
	if ( $ncols == 0 ) {
	    $ncols = $#names+1;
	    print STDERR "Recording following $ncols features : @names\nThe info field was $info\n@infos\n";
	    die if ( $ncols == 0 );
	}
	elsif ( $ncols != $#values+1 ) {
	    die "Number of columns are not identical at $chrom:$pos:$ref:$alt\n";
	}
	print SITE join("\t",$chrom,$pos,$id,$ref,$alt,$qual,$filt,$info)."\n";         
	print RAW join("\t",@values)."\n";
    }
    close IN;
    close RAW;
    close SITE;
    
    print STDERR "Performing quantile normalization of features..\n";    
    my $cmd = "$invNorm --in $outprefix.raw --out $outprefix.norm";
    &forkExecWait($cmd);
    
    open(SITE,"$outprefix.site") || die "Cannot open $outprefix.sites\n";
    open(NORM,"$outprefix.norm") || die "Cannot open $outprefix.norm\n";
    open(FTR,">$outprefix.feature") || die "Cannot open $outprefix.feature\n";

    ## open negative VCFs
    my @extFilts = ();
    my %extHdrs = ();
    open(EXT, "$binbcftools view $negVcf $chr:0- | ") || die "Cannot open file $negVcf\n";
    my $extPos = 0;
    while(<EXT>) {
	if ( /^#/ ) {
	    if ( /^##FILTER=<ID=([^,]+),/ ) {
		$extHdrs{$1} = $_;
	    }
	}
	else {
	    my ($chrom,$pos,$id,$ref,$alt,$qual,$filt) = split;		
	    #next if ( $filt eq "PASS" );
	    my @filts = split(/;/,$filt);
	    push(@extFilts,[$chrom,$pos,$ref,$alt,\@filts]);
	    $extPos = $pos;
	    last;
	}
    }
    
    my ($npos,$nneg,$noth) = (0,0,0);
    while(<SITE>) {
	my ($chrom,$pos,$id,$ref,$alt) = split;
	my @z = split(/[ \t\r\n]+/,<NORM>);
	my $ln = "";
	for(my $i=0; $i < @names; ++$i) {
	    $ln .= " ".($i+1).":$z[$i]";
	}
	print FTR "0 $ln\n";
	++$noth;
    }
    close FTR;
    close SITE;
    
    print STDERR "Applying trained SVM model on $noth variants\n";
    
    $cmd = "$svmclassify -b 1 $outprefix.feature $modelf $outprefix.svm.pred";
    #$cmd = "$svmclassify $outprefix.feature $modelf $outprefix.svm.pred";    
    &forkExecWait($cmd);
    
    print STDERR "Writing filtered site VCF files with SVM scores..\n";
    open(SITE,"$outprefix.site") || die "Cannot open $outprefix.sites\n";
    open(PRED,"$outprefix.svm.pred") || die "Cannot open $outprefix.svm.pred file\n";
    open(OUT,"| $binbgzip -c > $outprefix.sites.vcf.gz") || die "Cannot open $outprefix.sites.vcf.gz\n";
        
    splice(@hdrs,$#hdrs,0,"##INFO=<ID=SVM,Number=1,Type=Float,Description=\"SVM score for variant quality, passing $cutoff or greater\">\n");
    splice(@hdrs,$#hdrs,0,"##INFO=<ID=OVERLAP,Number=.,Type=String,Description=\"Overlap with possible variant types\">\n");
    splice(@hdrs,$#hdrs,0,"##FILTER=<ID=CEN,Description=\"Variant overlaps with centromeric region\">\n") unless ( defined($extHdrs{"CEN"}) );
    splice(@hdrs,$#hdrs,0,"##FILTER=<ID=EXTSVM,Description=\"Variant failed SVM filter from externally provided VCF\">\n") unless ( defined($extHdrs{"EXTSVM"}) );
    splice(@hdrs,$#hdrs,0,"##FILTER=<ID=EXHET,Description=\"Excess heterozygosity with HWE p-value < 1e-6\"\n") unless ( defined($extHdrs{"EXHET"}) );
    splice(@hdrs,$#hdrs,0,"##FILTER=<ID=SVM,Description=\"Variant failed SVM filter from new training model\">\n") unless ( defined($extHdrs{"SVM"}) );
    foreach my $key (keys %extHdrs) {
	splice(@hdrs,$#hdrs,0,$extHdrs{$key});
    }
    print OUT join("",@hdrs);
        
    my $maxan = 0;

    my $dummy = <PRED>;
    
    while(<SITE>) {
	my @F = split;
	my ($pred01,$pred,$pred0) = split(/\s+/,<PRED>);
	#chomp($pred);

	print STDERR "Processing $. lines at $F[0]:$F[1]\n" if ( $. % 100000 == 0);	

	## Read from extFilts
	while( $extPos < $F[1] ) {
	    my $line = <EXT>;
	    if ( $line ) {
		my ($chrom,$pos,$id,$ref,$alt,$qual,$filt) = split(/[\t\r\n ]+/,$line);
		my @filts = split(/;/,$filt);
		for(my $i=0; $i < @filts; ++$i) {
		    $filts[$i] = "EXTSVM" if ( $filts[$i] eq "SVM" );
		}
		push(@extFilts,[$chrom,$pos,$ref,$alt,\@filts]);
		$extPos = $pos;
	    }
	    else {
		$extPos = 1e9;
	    }
	}
	my $idx = 0;
	while( ( $idx <= $#extFilts ) && ( $extFilts[$idx]->[1] < $F[1] ) ) { ++$idx; }
	splice(@extFilts,0,$idx);
	
	my $info = $F[7];
	
	my $an = $1 if ( $F[7] =~ /;AN=(\d+)/ );
	$maxan = $an if ( $maxan < $an );
	
	my $maf = $1 if ( $F[7] =~ /AF=([^;]+);/ );
	$maf = 1-$maf if ( $maf > 0.5 );
	
	my $hweslp = $1 if ( $F[7] =~ /HWE_SLP_I=([^;]+);/ );
	
	my ($cbeg,$cend) = @{$hcent{$chr}};

	my @filts = ();

	## check overlaps with negative VCF
	for(my $i=0; $i < @extFilts; ++$i) {
	    my @G = @{$extFilts[$i]};
	    if ( ( $G[1] == $F[1] ) && ( $G[2] eq $F[3] ) && ( $G[3] eq $F[4] ) ) { # match found
		push(@filts,@{$G[4]});
		last;
	    }
	}

	if ( $#filts < 0 ) { # if previously unobserved
	    if ( ( $pred < $cutoff ) || ( $F[7] =~ /AC=0;/ ) ) {
		push(@filts,"SVM");
	    }
	    if ( ( $F[1] > $cbeg ) && ( $F[1] < $cend ) ) {
		push(@filts,"CEN");
	    }
	    if ( $hweslp < -13.81551 ) {
		push(@filts,"EXHET");
	    }
	}
	else {
	    if ( ( $filts[0] eq "PASS" ) && ( $F[7] =~ /AC=0;/ ) ) {
		@filts = ("SVM");
	    }
	}
	
	$F[6] = ($#filts < 0) ? "PASS" : join(';',@filts);
	$info .= ";SVM=$pred";
	print OUT join("\t",@F[0..6],$info)."\n";
    }
    close OUT;
    close PRED;
    close SITE;
    close EXT;
    
    my @acbrs = (1,2,3);
    push(@acbrs, int($maxan*1e-6)) if ( $maxan >= 4e6 );
    push(@acbrs, int($maxan*1e-5)) if ( $maxan >= 4e5 );
    push(@acbrs, int($maxan*1e-4)) if ( $maxan >= 4e4 );
    push(@acbrs, int($maxan*1e-3)) if ( $maxan >= 4e3 );
    push(@acbrs, int($maxan*1e-2)) if ( $maxan >= 4e2 );
    push(@acbrs, int($maxan*1e-1)) if ( $maxan >= 4e1 );    
    my $acbreaks = join(",",@acbrs);
    
    print STDERR "Producing VCF summary for SNPs..\n";
    print STDERR "Producing VCF summary for SNPs..\n";
    open(IN,"zcat $outprefix.sites.vcf.gz|") || die "Cannot open file\n";
    open(OUT2, "| $vcfsummary --ref $ref --db $dbsnp --FNRvcf $posVcfs[0] --bgzip $binbgzip --tabix $bintabix --chr $chr > $outprefix.sites.summary") || die "Cannot open file for writing\n";
    open(OUT3, "| $vcfsummary2 --ref $ref --db $dbsnp --FNRvcf $posVcfs[0] --bgzip $binbgzip --tabix $bintabix --chr $chr > $outprefix.sites.summary_v2") || die "Cannot open file for writing\n";    
    while(<IN>) {
	next if ( /^#/ );
	my @F = split;
	print OUT3 $_;
	print OUT2 $_;
    }
    close IN;
    close OUT2;
    close OUT3;
}
