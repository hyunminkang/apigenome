#!/usr/bin/perl -w

use strict;
use Time::HiRes qw(usleep nanosleep);
use File::Path;
use File::Basename;
use FindBin;
use lib $FindBin::Bin;
use hyunlib qw(%hszchrs initRef forkExecWait);

## vcf-milk-svm-filter
## Performs SVM filtering based on the aggregated output of MILK SVM

my $omnivcf = "/data/local/ref/gotcloud.ref/hg38/1000G_omni2.5.b38.sites.PASS.vcf.gz";
my $hapmapvcf = "/data/local/ref/gotcloud.ref/hg38/hapmap_3.3.b38.sites.vcf.gz";
my @posVcfs = ($omnivcf,$hapmapvcf);

my $ref = "/data/local/ref/gotcloud.ref/hg38/hs38DH.fa";
my $tabix = "tabix";
my $bgzip = "bgzip";
my $gotcloudroot = "../gotcloud";
my $dbsnp = "/data/local/ref/gotcloud.ref/hg38/dbsnp_142.b38.vcf.gz";
my $modelchr = "chr2";
my $xchr     = "chrX";
my ($xStart,$xStop) = (2781479,155701383);
my $centbed = "hg38.centromere.bed.gz";
my $chr = "";
my $out = "";
my $cutoff = -0.5;

wGetOptions(
    "-Identify nuclear families from KING2 output and sex map",
    "--Required Options",
    "vcf"       => [\$vcf,     "Chromosome to perform SVM filtering"],    
    "chr"       => [\$chr,     "Chromosome to perform SVM filtering"],
    "out"       => [\$out,     "Output VCf file name to generate"],    
    "--Additional Options",
    "model-chr" => [\$modelchr, "Chromosome label of model chromosome to train for autosomes"],
    "ref=s" => [\$ref, "Reference FASTA file (with .fai index)"],
    "tabix=s" => [\$tabix, "Binary path of tabix"],
    "bgzip=s" => [\$bgzip, "Binary path of bgzip"],
    "gcroot=s" => [\$gotcloudroot, "Gotcloud root directory"],
    "dbsnp=s" => [\$dbsnp, "dbSNP VCF file"],
    "pos=s" =>   [\@posvcf, "High quality VCFs"],
    "cutoff=f" => [\$cutoff, "Cutoff of SVM scores to consider the 
    "--Options for X chromosome",
    "x-label"   => [\$xchr,     "Chromosome label of X chromosome"],
    "x-start"   => [\$xStart,   "Start base position of non-PAR region in X chromosome"],
    "x-stop"    => [\$xStop,    "Stop  base position of non-PAR region in X chromosome"],    
    ) || wpod2usage(2);

unless ( ( $out ) && ( $chr ) ) {
    print STDERR "Missing required options --chr and/or --out\n";
    wpodusage(2);
}

die "Cannot open $centbed\n" unless ( -s $centbed );

my %hcent = ();
my $fh = zopen($fh);
while(<$fh>) {
    my ($chr,$beg,$end) = split;
    $hcent{$chr} = [$beg,$end];
}
close IN;

my $vcfsummary = "$FindBin::Bin/vcf-summary";
my $vcfsummary2 = "$FindBin::Bin/vcf-summary-v2";
my $invNorm     = "$gotcloudroot/src/bin/invNorm";
my $svmlearn    = "$gotcloudroot/src/bin/svm-train";
my $svmclassify = "$gotcloudroot/src/bin/svm-predict";

die "Cannot file $vcfsummary\n" unless ( -s $vcfsummary );
die "Cannot file $vcfsummary2\n" unless ( -s $vcfsummary2 );
die "Cannot file $invNorm\n" unless ( -s $invNorm );
die "Cannot file $svmlearn\n" unless ( -s $svmlearn );
die "Cannot file $svmclassify\n" unless ( -s $svmclassify );

&initRef($ref);

my $milkDir = "milk";
my $svmDir  = "svm";
my @ignores = qw(AC AN AF GC GN HWEAF_P MAX_IF MIN_IF MILK_LRE MILK_LUD MILK_BF MILK_HWEAF MILK_HWDGF DUP_CONC_ALL DUP_CONC_THRES TRIO_CONC_ALL TRIO_CONC_THRES MILK_CHRX);
my @includes = ();
my $checkNA = 1;
#my $bfIntercept = 2;
#my $bfSlope = 2;

unless ( -e "$svmDir" ) {
    mkdir("$svmDir") || die "Cannot create directory $svmDir\n";
}

my @names = ();
my $ncols = 0;
my %hIgnores = map { $_ => 1 } @ignores;
my %hIncludes = ();
my @includeKeys = ();
my @includeDefaultValues = ();
for(my $i=0; $i < @includes; ++$i) {
    my ( $key, $defaultVal ) = split(/,/,$includes[$i]);
    $hIncludes{$key} = $i;
    push(@names,$key);
    push(@includeKeys,$key);
    push(@includeDefaultValues,defined($defaultVal) ? $defaultVal : 0);
}
my $nIncludes = $#includes + 1;

my @discordsA = (0,1,1, 0,0,1, 1,0,1, 0,0,1, 0,0,0, 1,0,0, 1,0,1, 1,0,0, 1,1,0);
my @discordsX = (0,1,1, 0,0,0, 1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1, 0,0,0, 1,1,0);
my @dupdisc   = (0,1,1, 1,0,1, 1,1,0);

## Process the model chromosome first
my $szmodelchr = $hszchrs{$modelchr}->[3];
unless ( -s "$svmDir/milk_model.$modelchr.svm.model" ) {
    print STDERR "Creating SVM model for $modelchr first..\n";
    my $chr   = $modelchr;
    my $szchr = $hszchrs{$chr}->[3];

    my %hpos = ();

    print STDERR "Loading positive labels..\n";
    ## LABEL positive samples
    foreach my $posVcf (@posVcfs) {
	open(IN,"$tabix $posVcf $chr:1-$szchr| grep -w PASS|") || die "Cannot open file\n";
	while(<IN>) {
	    next if ( /^#/ );
	    my ($chrom,$pos,$id,$ref,$alt) = split;
	    $hpos{"$chrom:$pos"} = "$ref:$alt";
	}
    }
    my ($cbeg,$cend) = @{$hcent{$chr}};

    my %hneg = ();
    my $milkVcf = "$milkDir/milk.$chr.sites.vcf.gz";    
    print STDERR "Identifying negative labels from $milkVcf\n"; # using intercept $bfIntercept, log10-scale slope $bfSlope..\n";        

    open(IN,"zcat $milkVcf | cut -f 1-8| grep -v ^#|") || die "Cannot open file\n";
    while(<IN>) {
	my @F = split;
	next if ( $F[4] =~ /,/ );
	#next if ( ( ( length($F[3]) > 1 ) || ( length($F[4]) > 1 ) ) && ( $F[6] ne "." ) );
	next if ( ( length($F[3]) > 1 ) || ( length($F[4]) > 1 ) );

	next if ( ( $F[1] > $cbeg ) && ( $F[1] < $cend ) );

	my $ac = $1 if ( $F[7] =~ /AC=(\d+);/ );

	my @tcnts = split(/,/,$1) if ( $F[7] =~ /TRIO_CONC_THRES=([^;]+)/ );
	my @dcnts = split(/,/,$1) if ( $F[7] =~ /DUP_CONC_THRES=([^;]+)/ );	
	my ($ndisc,$nconc,$ddisc,$dconc) = (0,0,0,0);
	for(my $i=1; $i < 27; ++$i) {
	    if ( $tcnts[$i] > 0 ) {
		next if ( ( $i == 26 ) || ( $i == 12 ) || ( $i == 13 ) || ( $i == 14 ) );
		if ( $discordsA[$i] == 0 ) { $nconc += $tcnts[$i] }
		else { $ndisc += $tcnts[$i]; }
	    }
	}

	for(my $i=1; $i < 9; ++$i) {
	    if ( $dcnts[$i] > 0 ) {
		next if ( $i == 8 );
		if ( $dupdisc[$i] == 0 ) { $dconc += $dcnts[$i] }
		else { $ddisc += $dcnts[$i]; }		
	    }
	}		

	next if ( $ac < 2 );  ## do not include singletons
	if ( ( ( $ndisc > 2 ) && ( $ndisc > $nconc * 0.05 ) ) || ( ( $ddisc > 2 ) && ( $ddisc > $dconc * 0.05 ) ) ) {	
	    $hneg{"$F[0]:$F[1]:$F[3]:$F[4]"} = 1;
	}	
    }
    close IN;    

    ## write features
    my $out = "$svmDir/milk_model.$modelchr";
    
    print STDERR "Writing the feature information for libsvm..\n";
    open(RAW,">$out.raw") || die "Cannot open $out.raw for writing\n";
    open(SITE,">$out.site") || die "Cannot open $out.raw for writing\n";
    #open(IN,"zcat $pasteDir/$chr\_1\_$szchr\_paste.sites.vcf.gz|") || die "Cannot open file\n";
    open(IN,"zcat $milkDir/milk.$chr.sites.vcf.gz|") || die "Cannot open file\n";    
    my @hdrs = ();
    while(<IN>) {
	if ( /^#/ ) {
	    push(@hdrs,$_);
	    next;
	}
	my ($chrom,$pos,$id,$ref,$alt,$qual,$filt,$info) = split(/[ \t\r\n]+/);
	$info .= ";QUAL=$qual" unless ( $qual eq "." );
	my @infos = split(/;/,$info);
	my @values = ();
	my $k = 0;
	for(my $j=0; $j < @includeKeys; ++$j) {
	    push(@values,$includeDefaultValues[$j]);
	    ++$k;
	}	    
	
	for(my $j=0; $j < @infos; ++$j) {
	    my ($key,$val) = split(/=/,$infos[$j]);
	    #next if ( defined($hIgnores{$key})  || (!defined($hIncludes{$key}))); ## skip if ignored, or not in includes key
	    next if ( defined($hIgnores{$key}) );
	    next unless defined($val); ## skip keys without any values
	    if ( defined($hIncludes{$key}) ) {
		if ( !($checkNA) || ($val =~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/ ) ) {
		    $values[$hIncludes{$key}] = $val; # set value if given
		}
	    }
	    else {
		if ( !($checkNA) || ( $val =~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/ ) ) {
		    push(@values,$val);
		}
		else {
		    push(@values,0);
		}
		
		if ( $ncols == 0 ) {
		    push(@names,$key);
		}
		else {
		    die "Cannot recognize $key in $infos[$j], supposed to be $names[$j] at $j, $chrom:$pos:$ref:$alt $info\n" unless ($names[$k] eq $key );
		}
		++$k;
	    }
	}
	if ( $ncols == 0 ) {
	    $ncols = $#names+1;
	    print STDERR "Recording following $ncols features : @names\nThe info field was $info\n@infos\n";
	    die if ( $ncols == 0 );
	}
	elsif ( $ncols != $#values+1 ) {
	    die "Number of columns are not identical at $chrom:$pos:$ref:$alt\n";
	}
	print SITE join("\t",$chrom,$pos,$id,$ref,$alt,$qual,$filt,$info)."\n";	    
	print RAW join("\t",@values)."\n";
    }
    close IN;
    close RAW;
    close SITE;

    print STDERR "Performing quantile normalization of features..\n";    
    my $cmd = "$invNorm --in $out.raw --out $out.norm";
    &forkExecWait($cmd);

    open(SITE,"$out.site") || die "Cannot open $out.sites\n";
    open(NORM,"$out.norm") || die "Cannot open $out.norm\n";
    #open(FTR,">$out.feature") || die "Cannot open $out.feature\n";
    open(LBL,">$out.label") || die "Cannot open $out.label\n";

    my ($npos,$nneg,$noth) = (0,0,0);
    while(<SITE>) {
	my ($chrom,$pos,$id,$ref,$alt) = split;
	my @z = split(/[ \t\r\n]+/,<NORM>);
	my $ln = "";
	for(my $i=0; $i < @names; ++$i) {
	    $ln .= " ".($i+1).":$z[$i]";
	}
	#if ( defined($hpos{"$chrom:$pos:$ref:$alt"}) ) {
	if ( defined($hpos{"$chrom:$pos"}) ) {	    
	    if ( ( $hpos{"$chrom:$pos"} ne "$ref:$alt" ) || defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
		#print FTR "0 $ln\n";
		++$noth;
	    }
	    else {
		#print FTR "1 $ln\n";
		print LBL "1 $ln\n";
		++$npos;
	    }
	}
	elsif ( defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
	    #print FTR "-1 $ln\n";
	    print LBL "-1 $ln\n";
	    ++$nneg;
	}
	else {
	    #print FTR "0 $ln\n";
	    ++$noth;
	}
    }
    #close FTR;
    close LBL;
    close SITE;

    print STDERR "Training SVM classification model using $npos positive samples, $nneg negative samples with $noth additional samples\n";

    $cmd = "$svmlearn -s 0 -t 2 $out.label $out.svm.model";
    &forkExecWait($cmd);
}

my $modelf = "$svmDir/milk_model.$modelchr.svm.model";

foreach my $chr (@chrs) {
    my $szchr = $hszchrs{$chr}->[3];
    my $out = "$svmDir/milk_svm.$chr.gtonly";

    ## make a new training model for X chromosomes
    if ( $chr eq $xchr ) {
	## develop a new training model, focused only on non-PAR
	
	my %hpos = ();

	print STDERR "Loading positive labels..\n";
	## LABEL positive samples
	foreach my $posVcf (@posVcfs) {
	    open(IN,"$tabix $posVcf $chr:$xStart-$xStop| grep -w PASS|") || die "Cannot open file\n";
	    while(<IN>) {
		next if ( /^#/ );
		my ($chrom,$pos,$id,$ref,$alt) = split;
		next if ( $pos < $xStart );
		next if ( $pos > $xStop );		
		$hpos{"$chrom:$pos"} = "$ref:$alt";
	    }
	}
	my ($cbeg,$cend) = @{$hcent{$chr}};

	my %hneg = ();
	my $milkVcf = "$milkDir/milk.$chr.sites.vcf.gz";    
	print STDERR "Identifying negative labels from $milkVcf\n"; # using intercept $bfIntercept, log10-scale slope $bfSlope..\n";        

	open(IN,"$tabix $milkVcf $chr:$xStart-$xStop | cut -f 1-8| grep -v ^#|") || die "Cannot open file\n";
	while(<IN>) {
	    my @F = split;
	    next if ( $F[4] =~ /,/ );
	    #next if ( ( ( length($F[3]) > 1 ) || ( length($F[4]) > 1 ) ) && ( $F[6] ne "." ) );
	    next if ( ( length($F[3]) > 1 ) || ( length($F[4]) > 1 ) );
	    
	    next if ( ( $F[1] > $cbeg ) && ( $F[1] < $cend ) );
	    
	    my $ac = $1 if ( $F[7] =~ /AC=(\d+);/ );
	    
	    my @tcnts = split(/,/,$1) if ( $F[7] =~ /TRIO_CONC_THRES=([^;]+)/ );
	    my @dcnts = split(/,/,$1) if ( $F[7] =~ /DUP_CONC_THRES=([^;]+)/ );	
	    my ($ndisc,$nconc,$ddisc,$dconc) = (0,0,0,0);
	    for(my $i=1; $i < 27; ++$i) {
		if ( $tcnts[$i] > 0 ) {
		    next if ( ( $i == 26 ) || ( $i == 12 ) || ( $i == 13 ) || ( $i == 14 ) );
		    if ( $discordsX[$i] == 0 ) { $nconc += $tcnts[$i] }
		    else { $ndisc += $tcnts[$i]; }
		}
	    }
	    
	    for(my $i=1; $i < 9; ++$i) {
		if ( $dcnts[$i] > 0 ) {
		    next if ( $i == 8 );
		    if ( $dupdisc[$i] == 0 ) { $dconc += $dcnts[$i] }
		    else { $ddisc += $dcnts[$i]; }		
		}
	    }		
	    
	    next if ( $ac < 2 );  ## do not include singletons
	    if ( ( ( $ndisc > 2 ) && ( $ndisc > $nconc * 0.05 ) ) || ( ( $ddisc > 2 ) && ( $ddisc > $dconc * 0.05 ) ) ) {	
		$hneg{"$F[0]:$F[1]:$F[3]:$F[4]"} = 1;
	    }	
	}
	close IN;    
	
	## write features
	my $out = "$svmDir/milk_model.$chr";
	
	print STDERR "Writing the feature information for libsvm..\n";
	open(RAWPAR,">$out.rawPAR") || die "Cannot open $out.raw for writing\n";
	open(RAWX,">$out.rawX") || die "Cannot open $out.raw for writing\n";
	#open(SITEPAR,">$out.sitePAR") || die "Cannot open $out.sitePAR for writing\n";	
	#open(SITEX,">$out.siteX") || die "Cannot open $out.siteX for writing\n";
	open(SITE,">$out.site") || die "Cannot open $out.sitePAR for writing\n";	
	#open(IN,"zcat $pasteDir/$chr\_1\_$szchr\_paste.sites.vcf.gz|") || die "Cannot open file\n";
	#open(IN,"$tabix $milkDir/milk.$chr.sites.vcf.gz $chr:$xStart-$xStop |") || die "Cannot open file\n";
	open(IN,"zcat $milkDir/milk.$chr.sites.vcf.gz |") || die "Cannot open file\n";    	
	my @hdrs = ();
	while(<IN>) {
	    if ( /^#/ ) {
		next if ( /^##PEDIGREE/ );	
		next if ( /^##INFO=<ID=(FLT20|IBC|MILK|DUP|TRIO)/ );
		next if ( /^##FORMAT=<ID=(LRE|LUD|BF|FAMGT)/ );
		next if ( /^##FILTER=<ID=overlap/ );	    
		push(@hdrs,$_);
		next;
	    }
	    my ($chrom,$pos,$id,$ref,$alt,$qual,$filt,$info) = split(/[ \t\r\n]+/);

	    $info .= ";QUAL=$qual" unless ( $qual eq "." );
	    my @infos = split(/;/,$info);
	    my @values = ();
	    my $k = 0;
	    for(my $j=0; $j < @includeKeys; ++$j) {
		push(@values,$includeDefaultValues[$j]);
		++$k;
	    }	    
	    
	    for(my $j=0; $j < @infos; ++$j) {
		my ($key,$val) = split(/=/,$infos[$j]);
		#next if ( defined($hIgnores{$key})  || (!defined($hIncludes{$key}))); ## skip if ignored, or not in includes key
		next if ( defined($hIgnores{$key}) );
		next unless defined($val); ## skip keys without any values
		if ( defined($hIncludes{$key}) ) {
		    if ( !($checkNA) || ($val =~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/ ) ) {
			$values[$hIncludes{$key}] = $val; # set value if given
		    }
		}
		else {
		    if ( !($checkNA) || ( $val =~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/ ) ) {
			push(@values,$val);
		    }
		    else {
			push(@values,0);
		    }
		    
		    if ( $ncols == 0 ) {
			push(@names,$key);
		    }
		    else {
			die "Cannot recognize $key in $infos[$j], supposed to be $names[$j] at $j, $chrom:$pos:$ref:$alt $info\n" unless ($names[$k] eq $key );
		    }
		    ++$k;
		}
	    }
	    if ( $ncols == 0 ) {
		$ncols = $#names+1;
		print STDERR "Recording following $ncols features : @names\nThe info field was $info\n@infos\n";
		die if ( $ncols == 0 );
	    }
	    elsif ( $ncols != $#values+1 ) {
		die "Number of columns are not identical at $chrom:$pos:$ref:$alt\n";
	    }

	    print SITE join("\t",$chrom,$pos,$id,$ref,$alt,$qual,$filt,$info)."\n";	    	    
	    if ( ( $pos < $xStart ) || ( $pos > $xStop ) ) {
		print RAWPAR join("\t",@values)."\n";
	    }
	    else {
		print RAWX join("\t",@values)."\n";		
	    }
	}
	close IN;
	close RAWX;
	close RAWPAR;	
	close SITE;
	
	print STDERR "Performing quantile normalization of features..\n";    
	my $cmd = "$invNorm --in $out.rawX --out $out.normX";
	&forkExecWait($cmd);
	$cmd = "$invNorm --in $out.rawPAR --out $out.normPAR";
	&forkExecWait($cmd);	
	
	open(SITE,"$out.site") || die "Cannot open $out.sites\n";
	open(NORMX,"$out.normX") || die "Cannot open $out.normX\n";
	#open(FTR,">$out.feature") || die "Cannot open $out.feature\n";
	open(LBLX,">$out.labelX") || die "Cannot open $out.labelX\n";
	
	my ($npos,$nneg,$noth) = (0,0,0);
	while(<SITE>) {
	    my ($chrom,$pos,$id,$ref,$alt) = split;
	    next if ( $pos < $xStart );
	    next if ( $pos > $xStop );	    
	    my @z = split(/[ \t\r\n]+/,<NORMX>);
	    my $ln = "";
	    for(my $i=0; $i < @names; ++$i) {
		$ln .= " ".($i+1).":$z[$i]";
	    }
	    #if ( defined($hpos{"$chrom:$pos:$ref:$alt"}) ) {
	    if ( defined($hpos{"$chrom:$pos"}) ) {	    
		if ( ( $hpos{"$chrom:$pos"} ne "$ref:$alt" ) || defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
		    #print FTR "0 $ln\n";
		    ++$noth;
		}
		else {
		    #print FTR "1 $ln\n";
		    print LBLX "1 $ln\n";
		    ++$npos;
		}
	    }
	    elsif ( defined($hneg{"$chrom:$pos:$ref:$alt"}) ) {
		#print FTR "-1 $ln\n";
		print LBLX "-1 $ln\n";
		++$nneg;
	    }
	    else {
		#print FTR "0 $ln\n";
		++$noth;
	    }
	}
	#close FTR;
	close LBLX;
	close SITE;
	close NORMX;
	
	print STDERR "Training SVM classification model using $npos positive samples, $nneg negative samples with $noth additional samples\n";
	
	$cmd = "$svmlearn -s 0 -t 2 $out.labelX $out.svm.modelX";
	&forkExecWait($cmd);


	### After training, create predictions for PAR and nonPAR seperately,

	open(SITE,"$out.site") || die "Cannot open $out.sites\n";
	open(NORMX,"$out.normX") || die "Cannot open $out.norm\n";
	open(NORMPAR,"$out.normPAR") || die "Cannot open $out.norm\n";	
	open(FTRX,">$out.featureX") || die "Cannot open $out.feature\n";
	open(FTRPAR,">$out.featurePAR") || die "Cannot open $out.feature\n";	
	
	#my ($npos,$nneg,$noth) = (0,0,0);
	while(<SITE>) {
	    my ($chrom,$pos,$id,$ref,$alt) = split;
	    if ( ( $pos < $xStart ) || ( $pos > $xStop ) ) {
		my @z = split(/[ \t\r\n]+/,<NORMPAR>);
		my $ln = "";
		for(my $i=0; $i < @names; ++$i) {
		    $ln .= " ".($i+1).":$z[$i]";
		}
		print FTRPAR "0 $ln\n";
		++$noth;
	    }
	    else {
		my @z = split(/[ \t\r\n]+/,<NORMX>);
		my $ln = "";
		for(my $i=0; $i < @names; ++$i) {
		    $ln .= " ".($i+1).":$z[$i]";
		}
		print FTRX "0 $ln\n";
		++$noth;		
	    }
	}
	close FTRX;
	close FTRPAR;
	close NORMX;
	close NORMPAR;		
	close SITE;
	
	print STDERR "Applying trained SVM model on $noth variants\n";
	
	$cmd = "$svmclassify $out.featurePAR $modelf $out.svm.predPAR";
	&forkExecWait($cmd);
	$cmd = "$svmclassify $out.featureX $out.svm.modelX $out.svm.predX";
	&forkExecWait($cmd);	
	
	print STDERR "Writing filtered site VCF files with SVM scores..\n";
	open(SITE,"$out.site") || die "Cannot open $out.sites\n";    
	open(PREDX,"$out.svm.predX") || die "Cannot open $out.svm.pred file\n";
	open(PREDPAR,"$out.svm.predPAR") || die "Cannot open $out.svm.pred file\n";	
	open(OUT,"| $bgzip -c > $out.sites.vcf.gz") || die "Cannot open $out.sites.vcf.gz\n";
	#open(OUTU,"| $bgzip -c > $out.uniq.sites.vcf.gz") || die "Cannot open $out.sites.vcf.gz\n";
	
	splice(@hdrs,$#hdrs,0,"##INFO=<ID=SVM,Number=1,Type=Float,Description=\"Milk-SVM score for variant quality, passing $cutoff or greater\">\n");
	splice(@hdrs,$#hdrs,0,"##FILTER=<ID=CEN,Description=\"Variant overlaps with centromeric region\">\n");    
	splice(@hdrs,$#hdrs,0,"##FILTER=<ID=SVM,Description=\"Variant failed SVM filter\">\n");
	splice(@hdrs,$#hdrs,0,"##INFO=<ID=OVERLAP,Number=.,Type=String,Description=\"Overlap with possible variant types\">\n");
	splice(@hdrs,$#hdrs,0,"##FILTER=<ID=DISC,Description=\"Mendelian or duplicate genotype discordance is high (3/5% or more)\"\n");
	#splice(@hdrs,$#hdrs,0,"##FILTER=<ID=DISC10,Description=\"Mendelian or duplicate genotype discordance is high (11 or more)\"\n");    
	splice(@hdrs,$#hdrs,0,"##FILTER=<ID=EXHET,Description=\"Excess heterozygosity with HWE p-value < 1e-6\"\n");
	splice(@hdrs,$#hdrs,0,"##FILTER=<ID=CHRXHET,Description=\"Excess heterozygosity in chrX\"\n"); 	
	#splice(@hdrs,$#hdrs,0,"##FILTER=<ID=EXHOM,Description=\"Excess homozygosity with HWE p-value < 1e-6\"\n");    
	print OUT join("",@hdrs);
	#splice(@hdrs,$#hdrs,0,"##FILTER=<ID=CONFLICT,Description=\"Variant position conflicts with other variants with higher SVM score\"\n");
    #print OUTU join("",@hdrs);    
	
	#my %hbest = ();
	
	my $maxan = 0; 
	
	while(<SITE>) {
	    my @F = split;
	    my $isX = ( ( $F[1] < $xStart ) || ( $F[1] > $xStop ) ) ? 0 : 1;	
	    my $pred;
	    if ( $isX == 0 ) {
		$pred = <PREDPAR>;
	    }
	    else {
		$pred = <PREDX>;		
	    }
	    chomp($pred);
	    
	    my $info = $F[7];
	    $info =~ s/;MILK_LRE.*$//;
	    $info =~ s/^MILK_CHRX=[^;]+;//;	    
	    
	    my $an = $1 if ( $F[7] =~ /;AN=(\d+)/ );
	    $maxan = $an if ( $maxan < $an );
	    my @tcnts = split(/,/,$1) if ( $F[7] =~ /TRIO_CONC_THRES=([^;]+)/ );
	    my @dcnts = split(/,/,$1) if ( $F[7] =~ /DUP_CONC_THRES=([^;]+)/ );	
	    my ($ndisc,$nconc,$ddisc,$dconc) = (0,0,0,0);

	    my @discords = ($isX == 1) ? @discordsX : @discordsA;

	    my $chrx = $1 if ( $F[7] =~ /MILK_CHRX=([^;]+);/ );	    
	    
	    for(my $i=1; $i < 27; ++$i) {
		if ( $tcnts[$i] > 0 ) {
		    next if ( ( $i == 26 ) || ( $i == 12 ) || ( $i == 13 ) || ( $i == 14 ) );		
		    if ( $discords[$i] == 0 ) { $nconc += $tcnts[$i] }
		    else { $ndisc += $tcnts[$i]; }
		}
	    }
	    for(my $i=1; $i < 9; ++$i) {
		if ( $dcnts[$i] > 0 ) {
		    next if ( $i == 8 );		
		    if ( $dupdisc[$i] == 0 ) { $dconc += $dcnts[$i] }
		    else { $ddisc += $dcnts[$i]; }		
		}
	    }
	    
	    my $maf = $1 if ( $F[7] =~ /AF=([^;]+);/ );
	    $maf = 1-$maf if ( $maf > 0.5 );
	    
	    my $hweslp = $1 if ( $F[7] =~ /HWE_SLP_I=([^;]+);/ );
	    
	    my ($cbeg,$cend) = @{$hcent{$chr}};    
	    
	    my @filts = ();
	    if ( ( $pred < $cutoff ) || ( $F[7] =~ /AC=0;/ ) ) {
		push(@filts,"SVM");
	    }
	    if ( ( $F[1] > $cbeg ) && ( $F[1] < $cend ) ) {
		push(@filts,"CEN");
	    }	
	    
	    if ( ( ( $ndisc > 2 ) && ( $ndisc > $nconc * 0.05 ) ) || ( ( $ddisc > 2 ) && ( $ddisc > $dconc * 0.05 ) ) ) {
		push(@filts,"DISC");	    
	    }
	    if ( $hweslp < -13.81551 ) {
		push(@filts,"EXHET");	    
	    }
	    if ( ( defined($chrx) && ( $chrx < -3 ) ) ) {
		push(@filts,"CHRXHET");	    
	    }		    
	    
	    $F[6] = ($#filts < 0) ? "PASS" : join(';',@filts);
	    $info .= ";SVM=$pred";
	    print OUT join("\t",@F[0..6],$info)."\n";
	}
	close OUT;
	close PREDPAR;
	close PREDX;	
	close SITE;
	
	my @acbrs = (1,2,3);
	push(@acbrs, int($maxan*1e-6)) if ( $maxan >= 4e6 );
	push(@acbrs, int($maxan*1e-5)) if ( $maxan >= 4e5 );
	push(@acbrs, int($maxan*1e-4)) if ( $maxan >= 4e4 );
	push(@acbrs, int($maxan*1e-3)) if ( $maxan >= 4e3 );
	push(@acbrs, int($maxan*1e-2)) if ( $maxan >= 4e2 );
	push(@acbrs, int($maxan*1e-1)) if ( $maxan >= 4e1 );    
	my $acbreaks = join(",",@acbrs);
    
	print STDERR "Producing VCF summary for SNPs..\n";
	print STDERR "Producing VCF summary for SNPs..\n";
	open(IN,"zcat $out.sites.vcf.gz|") || die "Cannot open file\n";
	open(OUT2, "| $vcfsummary --ref $ref --db $dbsnp --FNRvcf $hapmapvcf --bgzip $bgzip --tabix $tabix --chr $chr > $out.sites.summary") || die "Cannot open file\n";
	open(OUT3, "| $vcfsummary2 --ref $ref --db $dbsnp --FNRvcf $hapmapvcf --bgzip $bgzip --tabix $tabix --chr $chr > $out.sites.summary_v2") || die "Cannot open file\n";    
	while(<IN>) {
	    next if ( /^#/ );
	    my @F = split;
	    print OUT3 $_;
	    print OUT2 $_;
	}
	close IN;
	close OUT2;
	close OUT3;	
    }
    else {
	print STDERR "Writing the feature information for libsvm..\n";
	open(RAW,">$out.raw") || die "Cannot open $out.raw for writing\n";
	open(SITE,">$out.site") || die "Cannot open $out.raw for writing\n";
	open(IN,"zcat $milkDir/milk.$chr.sites.vcf.gz |") || die "Cannot open file\n";
	
	my @hdrs = ();
	while(<IN>) {
	    if ( /^#/ ) {
		next if ( /^##PEDIGREE/ );	
		next if ( /^##INFO=<ID=(FLT20|IBC|MILK|DUP|TRIO)/ );
		next if ( /^##FORMAT=<ID=(LRE|LUD|BF|FAMGT)/ );
		next if ( /^##FILTER=<ID=overlap/ );	    
		push(@hdrs,$_);
		next;
	    }
	    my ($chrom,$pos,$id,$ref,$alt,$qual,$filt,$info) = split(/[ \t\r\n]+/);
	    $info .= ";QUAL=$qual" unless ( $qual eq "." );
	    my @infos = split(/;/,$info);
	    my @values = ();
	    my $k = 0;
	    for(my $j=0; $j < @includeKeys; ++$j) {
		push(@values,$includeDefaultValues[$j]);
		++$k;
	    }	    
	    
	    for(my $j=0; $j < @infos; ++$j) {
		my ($key,$val) = split(/=/,$infos[$j]);
		next if ( defined($hIgnores{$key}) );
		next unless defined($val); ## skip keys without any values
		if ( defined($hIncludes{$key}) ) {
		    if ( !($checkNA) || ($val =~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/ ) ) {
			$values[$hIncludes{$key}] = $val; # set value if given
		    }
		}
		else {
		    if ( !($checkNA) || ( $val =~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/ ) ) {
			push(@values,$val);
		    }
		    else {
			push(@values,0);
		    }
		    
		    if ( $ncols == 0 ) {
			push(@names,$key);
		    }
		    else {
			die "Cannot recognize $key in $infos[$j], supposed to be $names[$j] at $j, $chrom:$pos:$ref:$alt $info\n" unless ($names[$k] eq $key );
		    }
		    ++$k;
		}
	    }
	    if ( $ncols == 0 ) {
		$ncols = $#names+1;
		print STDERR "Recording following $ncols features : @names\nThe info field was $info\n@infos\n";
		die if ( $ncols == 0 );
	    }
	    elsif ( $ncols != $#values+1 ) {
		die "Number of columns are not identical at $chrom:$pos:$ref:$alt\n";
	    }
	    print SITE join("\t",$chrom,$pos,$id,$ref,$alt,$qual,$filt,$info)."\n";	    
	    print RAW join("\t",@values)."\n";
	}
	close IN;
	close RAW;
	close SITE;
	
	print STDERR "Performing quantile normalization of features..\n";    
	my $cmd = "$invNorm --in $out.raw --out $out.norm";
	&forkExecWait($cmd);

	open(SITE,"$out.site") || die "Cannot open $out.sites\n";
	open(NORM,"$out.norm") || die "Cannot open $out.norm\n";
	open(FTR,">$out.feature") || die "Cannot open $out.feature\n";
	
	my ($npos,$nneg,$noth) = (0,0,0);
	while(<SITE>) {
	    my ($chrom,$pos,$id,$ref,$alt) = split;
	    my @z = split(/[ \t\r\n]+/,<NORM>);
	    my $ln = "";
	    for(my $i=0; $i < @names; ++$i) {
		$ln .= " ".($i+1).":$z[$i]";
	    }
	    print FTR "0 $ln\n";
	    ++$noth;
	}
	close FTR;
	close SITE;
	
	print STDERR "Applying trained SVM model on $noth variants\n";
	
	$cmd = "$svmclassify $out.feature $modelf $out.svm.pred";
	&forkExecWait($cmd);
	
	print STDERR "Writing filtered site VCF files with SVM scores..\n";
	open(SITE,"$out.site") || die "Cannot open $out.sites\n";    
	open(PRED,"$out.svm.pred") || die "Cannot open $out.svm.pred file\n";
	open(OUT,"| $bgzip -c > $out.sites.vcf.gz") || die "Cannot open $out.sites.vcf.gz\n";
	#open(OUTU,"| $bgzip -c > $out.uniq.sites.vcf.gz") || die "Cannot open $out.sites.vcf.gz\n";
	
	splice(@hdrs,$#hdrs,0,"##INFO=<ID=SVM,Number=1,Type=Float,Description=\"Milk-SVM score for variant quality, passing $cutoff or greater\">\n");
	splice(@hdrs,$#hdrs,0,"##FILTER=<ID=CEN,Description=\"Variant overlaps with centromeric region\">\n");    
	splice(@hdrs,$#hdrs,0,"##FILTER=<ID=SVM,Description=\"Variant failed SVM filter\">\n");
	splice(@hdrs,$#hdrs,0,"##INFO=<ID=OVERLAP,Number=.,Type=String,Description=\"Overlap with possible variant types\">\n");
	splice(@hdrs,$#hdrs,0,"##FILTER=<ID=DISC,Description=\"Mendelian or duplicate genotype discordance is high (3/5% or more)\"\n");
	#splice(@hdrs,$#hdrs,0,"##FILTER=<ID=DISC10,Description=\"Mendelian or duplicate genotype discordance is high (11 or more)\"\n");    
	splice(@hdrs,$#hdrs,0,"##FILTER=<ID=EXHET,Description=\"Excess heterozygosity with HWE p-value < 1e-6\"\n");
	#splice(@hdrs,$#hdrs,0,"##FILTER=<ID=EXHOM,Description=\"Excess homozygosity with HWE p-value < 1e-6\"\n");    
	print OUT join("",@hdrs);
	#splice(@hdrs,$#hdrs,0,"##FILTER=<ID=CONFLICT,Description=\"Variant position conflicts with other variants with higher SVM score\"\n");
    #print OUTU join("",@hdrs);    
	
	#my %hbest = ();
	
	my $maxan = 0; 
	
	while(<SITE>) {
	    my @F = split;
	    my $pred = <PRED>;
	    chomp($pred);
	    
	    #my $milk = <MILK>;
	    #chomp($milk);
	    
	    #my @M = split(/[\t\r\n ]+/,$milk);
	    #while( defined($M[4]) && ( $M[4] =~ /,/ ) ) {
	    #    $milk = <MILK>;
	    #    chomp($milk);
	    #    @M = split(/[\t\r\n ]+/,$milk);	    
	    #}
	    
	    my $info = $F[7];
	    $info =~ s/;MILK_LRE.*$//;
	    
	    my $an = $1 if ( $F[7] =~ /;AN=(\d+)/ );
	    $maxan = $an if ( $maxan < $an );
	    my @tcnts = split(/,/,$1) if ( $F[7] =~ /TRIO_CONC_THRES=([^;]+)/ );
	    my @dcnts = split(/,/,$1) if ( $F[7] =~ /DUP_CONC_THRES=([^;]+)/ );	
	    my ($ndisc,$nconc,$ddisc,$dconc) = (0,0,0,0);
	    for(my $i=1; $i < 27; ++$i) {
		if ( $tcnts[$i] > 0 ) {
		    next if ( ( $i == 26 ) || ( $i == 12 ) || ( $i == 13 ) || ( $i == 14 ) );		
		    if ( $discordsA[$i] == 0 ) { $nconc += $tcnts[$i] }
		    else { $ndisc += $tcnts[$i]; }
		}
	    }
	    for(my $i=1; $i < 9; ++$i) {
		if ( $dcnts[$i] > 0 ) {
		    next if ( $i == 8 );		
		    if ( $dupdisc[$i] == 0 ) { $dconc += $dcnts[$i] }
		    else { $ddisc += $dcnts[$i]; }		
		}
	    }
	    
	    my $maf = $1 if ( $F[7] =~ /AF=([^;]+);/ );
	    $maf = 1-$maf if ( $maf > 0.5 );
	    
	    my $hweslp = $1 if ( $F[7] =~ /HWE_SLP_I=([^;]+);/ );
	    
	    my ($cbeg,$cend) = @{$hcent{$chr}};    
	    
	    my @filts = ();
	    if ( ( $pred < $cutoff ) || ( $F[7] =~ /AC=0;/ ) ) {
		push(@filts,"SVM");
	    }
	    if ( ( $F[1] > $cbeg ) && ( $F[1] < $cend ) ) {
		push(@filts,"CEN");
	    }	
	    
	    if ( ( ( $ndisc > 2 ) && ( $ndisc > $nconc * 0.05 ) ) || ( ( $ddisc > 2 ) && ( $ddisc > $dconc * 0.05 ) ) ) {
		push(@filts,"DISC");	    
	    }
	    if ( $hweslp < -13.81551 ) {
		push(@filts,"EXHET");	    
	    }
	    
	    $F[6] = ($#filts < 0) ? "PASS" : join(';',@filts);
	    $info .= ";SVM=$pred";
	    print OUT join("\t",@F[0..6],$info)."\n";
	}
	close OUT;
	close PRED;
	close SITE;
	
	my @acbrs = (1,2,3);
	push(@acbrs, int($maxan*1e-6)) if ( $maxan >= 4e6 );
	push(@acbrs, int($maxan*1e-5)) if ( $maxan >= 4e5 );
	push(@acbrs, int($maxan*1e-4)) if ( $maxan >= 4e4 );
	push(@acbrs, int($maxan*1e-3)) if ( $maxan >= 4e3 );
	push(@acbrs, int($maxan*1e-2)) if ( $maxan >= 4e2 );
	push(@acbrs, int($maxan*1e-1)) if ( $maxan >= 4e1 );    
	my $acbreaks = join(",",@acbrs);
    
	print STDERR "Producing VCF summary for SNPs..\n";
	print STDERR "Producing VCF summary for SNPs..\n";
	open(IN,"zcat $out.sites.vcf.gz|") || die "Cannot open file\n";
	open(OUT2, "| $vcfsummary --ref $ref --db $dbsnp --FNRvcf $hapmapvcf --bgzip $bgzip --tabix $tabix --chr $chr > $out.sites.summary") || die "Cannot open file\n";
	open(OUT3, "| $vcfsummary2 --ref $ref --db $dbsnp --FNRvcf $hapmapvcf --bgzip $bgzip --tabix $tabix --chr $chr > $out.sites.summary_v2") || die "Cannot open file\n";    
	while(<IN>) {
	    next if ( /^#/ );
	    my @F = split;
	    print OUT3 $_;
	    print OUT2 $_;
	}
	close IN;
	close OUT2;
	close OUT3;
    }
}
