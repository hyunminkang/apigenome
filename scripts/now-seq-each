#!/usr/bin/perl -w

use strict;
use POSIX qw(strftime);
use FindBin;
use lib $FindBin::Bin;
#use lib '/net/fantasia/home/hmkang/bin/utils';
use wGetOptions qw(wpod2usage wGetOptions);
use hyunlib qw(makeMake forkExecWait);

my $id = "";
my $group = "";
my $qplotR = "";
my $qplotStats = "";
my $selfSM = "";
my $out = "";

## Create the following summary statistics
##  1. ID                - sample ID
##  2. GROUP             - subdirectory name, often same to the pool name
##  3. DATE              - date of QC assessment
##  4. PCT_FREEMIX       - % contamination estimated from verifyBamID
##  5. N_READS_M         - Number of total reads in millions
##  6. PCT_MAPPED        - % of mapped reads
##  7. PCT_MQ0           - % of mapped reads with zero mapping quality
##  8. PCT_PAIRED        - % of paired reads
##  9. PCT_PROP_PAIRED   - % of properly paired reads
## 10. MAPPED_Gb         - Total gigabases of mapped reads, excluding (1) QC-failed (2) secondary, (3) duplicated reads, or (4) 'N' bases in the reference genome.
## 11. Q20_Gb            - Total gigabases of mapped, excluding (1)-(4) above
## 12. PCT_Q20_BASE      - % of Q20 bases among all mapped bases
## 13. MEAN_DEPTH        - Average mapped depth dividing by non-'N' bases, excluding (1)-(4) above.
## 14. PCT_GENOME_COV    - % of genome covered, excluding the regions with 'N' bases
## 15. ISIZE_MODE        - Mode of insert size
## 16. ISIZE_MEDIAN      - Median insert size
## 17. PCT_DUPS          - Percentage of duplicated reads among mapped reads
## 18. PCT_GENOME_DP5    - % of genome coverged at depth 5 or greater, excluding the regions with 'N' bases
## 19. PCT_GENOME_DP10   - % of genome coverged at depth 10 or greater, excluding the regions with 'N' bases
## 20. PCT_GENOME_DP20   - % of genome coverged at depth 20 or greater, excluding the regions with 'N' bases
## 21. PCT_GENOME_DP30   - % of genome coverged at depth 30 or greater, excluding the regions with 'N' bases
## 22. VMR_DEPTH         - Variance-to-mean ratio of depth, as an indicator of over-disperson of depth (e.g. due to GC bias)
## 23. DEPTH_Q10         - Average mapped depth for Q10 bases, excluding (1)-(4) above, dividing by non-'N' bases.
## 24. DEPTH_Q20         - Average mapped depth for Q20 bases, excluding (1)-(4) above, dividing by non-'N' bases.
## 25. DEPTH_Q30         - Average mapped depth for Q30 bases, excluding (1)-(4) above, dividing by non-'N' bases.
## 26. RAW_BASE_Gb       - (Approximate) Total number of sequenced gigabases (N_READS_M x MAX_CYCLE)
## 27. PCT_OVERLAP_READS - % of overlapping reads where insert size is equal or smaller than the cycle.
## 28. PCT_OVERLAP_BASES - % of overlapping bases, counting only overlapping fraction of reads based on insert size
## 29. ISIZE_IQR         - Inter-quartile range of insert size
## 30. ISIZE_STDEV       - Standard deviation of insert size (capped at 10kb).
## 31. GC_DEPTH_0_1      - GC-normalized depth for top 1 percentile
## 32. GC_DEPTH_1_5      - GC-normalized depth for top 1-5 percentile
## 33. GC_DEPTH_5_25     - GC-normalized depth for top 5-25 percentile
## 34. GC_DEPTH_25_75    - GC-normalized depth for top 25-75 percentile
## 35. GC_DEPTH_75_95    - GC-normalized depth for top 75-95 percentile
## 35. GC_DEPTH_95_99    - GC-normalized depth for top 95-99 percentile
## 36. GC_DEPTH_99_100   - GC-normalized depth for top 99-100 percentile
## 37. LIBRARY_SIZE_M    - Library size (# of reads in library in million) = (TOTAL_READS) / (0-log(1-PCT_DUPS/100))

wGetOptions(
    "-Scan the gotCloud QC output directories, and summarize statistics",
    "--Required Options",
    "id=s" => [\$id,"Sample ID"],
    "group=s" => [\$group,"Group Name"],    
    "qplotR=s" => [\$qplotR, "Path to QPLOT's .R output"],
    "qplotStats=s" => [\$qplotStats, "Path to QPLOT's .stats output"],
    "selfSM=s" => [\$selfSM, "Path to verifyBamID's .selfSM output"],        
    "out=s" => [\$out, "Output directory"],
    ) || wpod2usage(2);

unless ( ($id) && ( $qplotR ) && ( $qplotStats) && ( $selfSM) && ( $out ) ) {
    print STDERR "ERROR: Missing required option\n";
    wpod2usage(2);
}

open(OUT,">$out") || die "Cannot open file $out for writing\n";
my @hdrs = qw(ID GROUP DATE PCT_FREEMIX N_READS_M PCT_MAPPED PCT_MQ0 PCT_PAIRED PCT_PROP_PAIR MAPPED_Gb Q20_Gb PCT_Q20_BASE MEAN_DEPTH PCT_GENOME_COV ISIZE_MODE ISIZE_MEDIAN PCT_DUPS PCT_GENOME_DP5 PCT_GENOME_DP10 PCT_GENOME_DP20 PCT_GENOME_DP30 VMR_DEPTH DEPTH_Q10 DEPTH_Q20 DEPTH_Q30 RAW_BASE_Gb PCT_OVERLAP_READS PCT_OVERLAP_BASES ISIZE_IQR ISIZE_STDEV GC_DEPTH_0_1 GC_DEPTH_1_5 GC_DEPTH_5_25 GC_DEPTH_25_75 GC_DEPTH_75_95 GC_DEPTH_95_99 GC_DEPTH_99_100 LIBRARY_SIZE_M);
print OUT join("\t",@hdrs)."\n";
my @metrics = &parseQCFiles($selfSM,$qplotStats,$qplotR);
print OUT join("\t",$id,$group,@metrics)."\n";
close OUT;

sub parseRVector {
    my $line = shift;
    chomp($line);
    if ( /c\((\S+)\)/ ) {
	my @F = split(/,/,$1);
	return @F;
    }
    else {
	die "Cannot parse R vector in $line\n";
    }
}


# Extract the following stats
# 0 - FREEMIX              FREEMIX value from verifyBamID
# 1 - 2. N_READS_M         Total # reads in millions
# 2 - 3. PCT_MAPPED        % Mapped reads
# 3 - 6. PCT_MQ0           % MQ0 reads
# 4 - 8. PCT_PAIRED        % Paired reads
# 5 - 9. PCT_PROP_PAIR     % Properly paired reads
# 6 - 10. MAPPED_Gb        Total # of mapped bases in billions
# 7 - 11. Q20_Gb           Total # of >Q20 bases in billuons
# 8 - 12. PCT_Q20          % Q20 bases
# 9 - 13. MEAN_DEPTH       Mean Depth (Mapped)
# 10 - 14. PCT_GENOME_COV   % Genome covered
# 11 - 18. ISIZE_MODE       Mode of insert size
# 12 - 19. ISIZE_MEDIAN     Median of insert size
# 13 - 21. PCT_DUPS         % of Duplicate reads
# 14 - PCT_GENOME_DP5       % Genome covered with DP>=5
# 15 - PCT_GENOME_DP10      % Genome covered with DP>=10
# 16 - PCT_GENOME_DP20      % Genome covered with DP>=20
# 17 - PCT_GENOME_DP30      % Genome covered with DP>=30
# 18 - VMR_DEPTH            % Variant-to-mean Ratio for depth
# 19 - DEPTH_Q10            Mean depth with Q10
# 20 - DEPTH_Q20            Mean depth with Q20
# 21 - DEPTH_Q30            Mean depth with Q30
# 22 - RAW_BASE_Gb          Raw depth : N_READS_M * MAX_CYCLE
# 23 - PCT_OVERLAP_READS    Percentage of overlapping fragments
# 24 - PCT_OVERLAP_BASES    Percentage of overlapping bases
sub parseQCFiles {
    my ($genocheckfile,$statfile,$rfile) = @_;
    my @metrics = ();    

    if ( -s $genocheckfile ) {
	open(IN,$genocheckfile) || die "Cannot open $genocheckfile for reading\n";
	my $line = <IN>;
	$line = <IN>;
	close IN;
    
	my @F = split(/\s+/,$line);
	push(@metrics,sprintf("%.1lf",$F[6]*100));
    }
    else {
	print STDERR "Cannot find $genocheckfile\n";
	push(@metrics,"0.0");
    }

    my @flags = (0,1,1,0,0,1,0,1,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    open(IN,$statfile) || die "Cannot open $statfile for reading\n";    
    for(my $i=0; <IN>; ++$i) {
	if ( $flags[$i] == 1 ) {
	    my ($name,$val) = split;
	    push(@metrics,$val);
	}
    }
    close IN;

    my $nReadsM = $metrics[1];
    my $meanDepth = $metrics[9];
    my $pctGenomeCov = $metrics[10];
    my $pctDups = $metrics[13];
    
    open(IN,$rfile) || die "Cannot open $rfile for reading\n";
    my @phredX = ();
    my @phredZ = ();
    my @cycleX = ();
    my @cycleZ = ();
    my @gcbiasX = ();
    my @gcbiasY = ();
    my @gcbiasZ = ();
    my @isizeX = ();
    my @isizeY = ();
    my @depthX = ();
    my @depthY = ();
    for(my $i=0; <IN>; ++$i) {
	if ( $i == 11 ) {
	    @phredX = &parseRVector($_);
	}
	elsif ( $i == 15 ) {
	    @phredZ = &parseRVector($_);
	}
	elsif ( $i == 42 ) {
	    @cycleX = &parseRVector($_);
	}
	elsif ( $i == 46 ) {
	    @cycleZ = &parseRVector($_);
	}
	elsif ( $i == 67 ) {
	    @gcbiasZ = &parseRVector($_);
	}
	elsif ( $i == 68 ) {
	    @gcbiasX = &parseRVector($_);
	}
	elsif ( $i == 69 ) {
	    @gcbiasY = &parseRVector($_);
	}
	elsif ( $i == 94 ) {
	    @isizeX = &parseRVector($_);
	}
	elsif ( $i == 95 ) {
	    @isizeY = &parseRVector($_);	    
	}
	elsif ( $i == 133 ) {
	    @depthX = &parseRVector($_);
	}
	elsif ( $i == 134 ) {
	    @depthY = &parseRVector($_);
	}
    }

    ## calculate % DP5, DP10, DP20, DP30 (among DP>0)
    ## also calculate VMR
    my @cumDPs = (0) x ($#depthX+1);
    $cumDPs[$#depthX] = $depthY[$#depthX];
    my $cntDP = 0;
    my $sumDP = 0;
    my $sumsqDP = 0;
    for(my $i= $#depthX-1; $i >=0; --$i) {
	$cumDPs[$i] += $cumDPs[$i+1] + $depthY[$i];
	$cntDP += $depthY[$i];
	$sumDP += ( $depthX[$i] * $depthY[$i]);
	$sumsqDP += ($depthX[$i] * $depthX[$i] * $depthY[$i]);
    }
    $cntDP /= ($pctGenomeCov/100);
    my $meanDP = $sumDP / $cntDP;
    my $varDP = $sumsqDP / $cntDP - $meanDP * $meanDP;
    my $VMR = $varDP / $meanDP;
    
    my $pctGenomeDP5 = $pctGenomeCov * $cumDPs[4] / $cumDPs[0];
    my $pctGenomeDP10 = $pctGenomeCov * $cumDPs[9] / $cumDPs[0];
    my $pctGenomeDP20 = $pctGenomeCov * $cumDPs[19] / $cumDPs[0];    
    my $pctGenomeDP30 = $pctGenomeCov * $cumDPs[29] / $cumDPs[0];

    ## calculate %Q10, Q20, Q30 bases
    my ($q0, $q10, $q20, $q30) = (0,0,0,0);
    for(my $i=0; $i < @phredX; ++$i) {
	$q0 += $phredZ[$i];
	if ( $phredX[$i] >= 10 ) {
	    $q10 += $phredZ[$i];
	    if ( $phredX[$i] >= 20 ) {
		$q20 += $phredZ[$i];
		if ( $phredX[$i] >= 30 ) {
		    $q30 += $phredZ[$i];		    
		}
	    }
	}
    }
    my $q10DP = $meanDepth * $q10 / $q0;
    my $q20DP = $meanDepth * $q20 / $q0;
    my $q30DP = $meanDepth * $q30 / $q0;
    my $maxCycle = $cycleX[$#cycleX];

    my $rawBases = $metrics[1] * $maxCycle / 1000;

    ## fraction of pairs with too small insert sizes
    my ($totalPairs,$overlappingPairs,$overlappingFracPairs) = (0,0,0);
    for(my $i=0; $i < @isizeX; ++$i) {
	$totalPairs += $isizeY[$i];
	if ( $isizeX[$i] <= $maxCycle ) {
	    $overlappingPairs += $isizeY[$i] ;
	    $overlappingFracPairs += ($isizeY[$i] * ($maxCycle - $isizeX[$i]) / $maxCycle);
	}
    }
    my $pctOverlapReads = $overlappingPairs/$totalPairs*100;
    my $pctOverlapBases = $overlappingFracPairs/$totalPairs*100;

    ## when calculating SE, cap insert size to 1kb
    my $maxIS = 1000;
    my ($cntIS,$sumIS,$sqSumIS) = (0,0);
    my ($q1IS,$q3IS) = (0,0);
    for(my $i=0; $i < @isizeX; ++$i) {
	$cntIS += $isizeY[$i];
	my $x = ($isizeX[$i] > $maxIS) ? $maxIS : $isizeX[$i];
	$sumIS += ($x * $isizeY[$i]);
	$sqSumIS += ( $x * $x * $isizeY[$i] );
	$q1IS = $isizeX[$i] if ( $cntIS < 0.25 * $totalPairs );
	$q3IS = $isizeX[$i] if ( $cntIS < 0.75 * $totalPairs );	
    }

    my $gcTotal = 0;
    my @gcCutOffs = (0,0.01,0.05,0.25,0.75,0.95,0.99,1);
    my @gcDepthNum =  (0,0,0,0,0,0,0);
    my @gcDepthDen =  (0,0,0,0,0,0,0);    
    for(my $i=0; $i < @gcbiasX; ++$i) {
	$gcTotal += $gcbiasZ[$i];
	$gcbiasY[$i] = 1 if ( $gcbiasY[$i] eq "NA" );
    }
    my $gcSum = 0;
    for(my $i=0; $i < @gcbiasX; ++$i) {  
	for(my $j=0; $j < $#gcCutOffs; ++$j) {  ## [gcSum, gcSum + gcbiasZ[i]]
	    ## not included at all
	    if ( $gcSum + $gcbiasZ[$i] < $gcCutOffs[$j] * $gcTotal ) { }   ## no overlap, do nothing
	    elsif ( $gcSum >= $gcCutOffs[$j+1] * $gcTotal) {}              ## no overlap, do nothing
	    elsif ( $gcSum >= $gcCutOffs[$j] * $gcTotal) {
		if ( $gcSum + $gcbiasZ[$i] < $gcCutOffs[$j+1] * $gcTotal ) {  ## completely contained
		    $gcDepthDen[$j] += $gcbiasZ[$i];
		    $gcDepthNum[$j] += ( $gcbiasY[$i] * $gcbiasZ[$i] );
		}
		else {  ## partially contained - cut at the right side
		    my $frac = ($gcCutOffs[$j+1]*$gcTotal - $gcSum)/($gcbiasZ[$i]);
		    $gcDepthDen[$j] += ( $frac * $gcbiasZ[$i] );
		    $gcDepthNum[$j] += ( $frac * $gcbiasY[$i] * $gcbiasZ[$i] );
		    ##$gcDepthDen[$j+1] += ( ( 1-$frac ) * $gcbiasZ[$i] );
		    ##$gcDepthNum[$j+1] += ( ( 1-$frac ) * $gcbiasY[$i] * $gcbiasZ[$i] );		    
		}
	    }
	    else {  ## gcSum < $gcCutOffs[$j] < $gcSum + gcbiasZ[$j]
		my $frac = ($gcbiasZ[$i]+$gcSum - $gcCutOffs[$j]*$gcTotal)/($gcbiasZ[$i]);
		$gcDepthDen[$j] += ( $frac * $gcbiasZ[$i] );
		$gcDepthNum[$j] += ( $frac * $gcbiasY[$i] * $gcbiasZ[$i] );
		##$gcDepthDen[$j+1] += ( ( 1-$frac ) * $gcbiasZ[$i] );
		##$gcDepthNum[$j+1] += ( ( 1-$frac ) * $gcbiasY[$i] * $gcbiasZ[$i] );		    		
	    }
	}
	$gcSum += $gcbiasZ[$i];
    }
	

    #my $group = "DACHS_BATCH".int(rand(3));
    my $mindate = (stat($statfile))[9];
    $mindate = (stat($rfile))[9] if ( (stat($rfile))[9] < $mindate );
    $mindate = (stat($statfile))[9] if ( (stat($statfile))[9] < $mindate );
    #$mindate = sprintf(strftime("%m/%d/%Y", localtime( $mindate )));
    $mindate = sprintf(strftime("%Y/%m/%d", localtime( $mindate )));    

    return ($mindate,@metrics,
	    sprintf("%.2lf",$pctGenomeDP5),
	    sprintf("%.2lf",$pctGenomeDP10),
	    sprintf("%.2lf",$pctGenomeDP20),
	    sprintf("%.2lf",$pctGenomeDP30),
	    sprintf("%.2lf",$VMR),
	    sprintf("%.2lf",$q10DP),
	    sprintf("%.2lf",$q20DP),
	    sprintf("%.2lf",$q30DP),
	    sprintf("%.2lf",$rawBases),
	    sprintf("%.2lf",$pctOverlapReads),
	    sprintf("%.2lf",$pctOverlapBases),
	    sprintf("%.1lf",$q3IS-$q1IS),
	    sprintf("%.1lf",sqrt($sqSumIS/$cntIS-$sumIS*$sumIS/$cntIS/$cntIS)),
	    sprintf("%.3lf",$gcDepthNum[0]/$gcDepthDen[0]),
	    sprintf("%.3lf",$gcDepthNum[1]/$gcDepthDen[1]),
	    sprintf("%.3lf",$gcDepthNum[2]/$gcDepthDen[2]),
	    sprintf("%.3lf",$gcDepthNum[3]/$gcDepthDen[3]),
	    sprintf("%.3lf",$gcDepthNum[4]/$gcDepthDen[4]),
	    sprintf("%.3lf",$gcDepthNum[5]/$gcDepthDen[5]),
	    sprintf("%.3lf",$gcDepthNum[6]/$gcDepthDen[6]),	    
	    sprintf("%.1lf",$nReadsM/(1e-6 - log(1-$pctDups/100))));
}
