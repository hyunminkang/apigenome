#!/usr/bin/perl -w

use strict;
use POSIX qw(pow log10 sqrt);
use FindBin;
use lib $FindBin::Bin;
#use lib '/net/fantasia/home/hmkang/bin/utils';
use wGetOptions qw(wpod2usage wGetOptions);
use hyunlib qw(zopen);

my $kin0f = "";
my $sexmapf = "";
my $outf = "";
my $groupf = "";
my $dupThres = 0.4;
my $relThres = 0.175;
my $poThres  = 0.0035;
my $rmOverlap = "";

wGetOptions(
    "-Identify nuclear families from KING2 output and sex map",
    "--Required Options",
    "kin0=s" => [\$kin0f, ".kin0 file from KING2",".kin0 file from KING2. Use options --kinship --degree 4 (or 3)"],
    "sex=s" => [\$sexmapf, "Sex map file", "Sex map file containing the sex of each individual as ploidy of X chromosomes"],
    "out=s" => [\$outf, "Output file", "Output file prefix"],
    "--Additional Options",
    "group=s" => [\$groupf, "Group file of each individual", "Group map file containing the batch information of each individual"],
    "dup-thres=f" => [\$dupThres, "Mininumn kinship coefficient to be considered as duplicate pair"],
    "rel-thres=f" => [\$relThres, "Mininumn kinship coefficient to be considered as 1st degree relative"],
    "po-thres=f" => [\$poThres, "Maximum IBS0 coefficient to be considered as parent-offspring pair"],
    "rm-overlap" => [\$rmOverlap, "Remove overlapping individuals between families"],
    ) || wpod2usage(2);

unless ( ( $kin0f ) && ( $outf ) && ( $sexmapf ) ) {
    print STDERR "ERROR: Missing required option\n";
    wpod2usage(2);
}

my %hsex = ();
my %hcent = ();
my @ids = ();

my $nsex = 0;

open(IN,$sexmapf) || die "Cannot open file $sexmapf\n";
while(<IN>) {
    my ($id,$sex) = split;
    $hsex{$id} = $sex;
    push(@ids,$id);
    ++$nsex;
}
close IN;

print STDERR "Finished reading sex information of $nsex individuals from $sexmapf\n";

if ( $groupf ) {
    my $ngrp = 0;    
    open(IN,$groupf) || die "Cannot open file $groupf\n";
    while(<IN>) {
	my ($id,$group) = split;
	$hcent{$id} = $group;
	++$ngrp;
    }
    close IN;
    print STDERR "Finished reading group information of $ngrp indiviuduals from $groupf\n";    
}
else {
    foreach my $id (sort keys %hsex) {
	$hcent{$id} = ".";
    }
    print STDERR "Skipping assigning group information for each individual\n";    
}
	     

my %hrel = ();

my ($ndup,$npo,$nfs,$netc) = (0,0,0,0);
open(IN,$kin0f) || die "Cannot open file $kin0f\n";
my $newformat = 0;
while(<IN>) {
    if ( /^FID/ ) {
	my @H = split;
	if ( ( $H[0] eq "FID1" ) && ( $H[1] eq "ID1" ) && ( $H[2] eq "FID2" ) && ( $H[3] eq "ID2" ) && ( $H[4] eq "N_SNP" ) ) {
	    if ( ( $H[5] eq "HetHet" ) && ( $H[6] eq "IBS0" ) && ( $H[7] eq "Kinship" ) ) {
		$newformat = 0;
	    }
	    elsif ( ( $H[5] eq "HetHet" ) && ( $H[6] eq "IBS0" ) && ( $H[7] eq "HetConc" ) && ( $H[8] eq "HomIBS0" ) && ( $H[9] eq "Kinship" ) && ( $H[10] eq "IBD1Seg" ) && ( $H[11] eq "IBD2Seg" ) && ( $H[12] eq "PropIBD" ) && ( $H[13] eq "InfType" ) ) {
		$newformat = 1;
	    }
	    else {
		die "Cannot recognize the current header @H\n";		
	    }
	}
	else {
	    die "Cannot recognize the current header @H\n";
	}
    }
    elsif ( $newformat ) {
	my ($fid1,$id1,$fid2,$id2,$nsnp,$hethet,$ibs0,$hetconc,$homibs0,$kin,$ibd1,$ibd2,$pibd,$infType) = split;

	if ( $. == 2 ) {
	    print STDERR "New KING output format was detected. --dup-thres, --rel-thres, --po-thres parameters will not take effect...\n";
	}
	
	my $rel = "ETC";
	if ( $infType eq "Dup/MZ" ) { $rel = "DUP"; ++$ndup; }
	elsif ( $infType eq "PO" ) { $rel = "PO"; ++$npo; }
	elsif ( $infType eq "FS" ) { $rel = "FS"; ++$nfs; }
	else { ++$netc; }

	$hrel{$id1}{$id2} = $rel;
	$hrel{$id2}{$id1} = $rel;	
    }
    else {
	my ($fid1,$id1,$fid2,$id2,$nsnp,$hethet,$ibs0,$kin) = split;    
    
	my $rel = "ETC";
	if ( $kin > $dupThres ) { $rel = "DUP"; ++$ndup; }
	elsif ( ( $kin >$relThres )&& ( $ibs0 < $poThres ) ) { $rel = "PO"; ++$npo; }
	elsif ( $kin > $relThres ) { $rel = "FS"; ++$nfs; }
	else { ++$netc; }
	
	$hrel{$id1}{$id2} = $rel;
	$hrel{$id2}{$id1} = $rel;
    }
}
close IN;

print STDERR "Finished reading pairwise relationship of $ndup duplicates, $npo parent-offsprings, $nfs full-siblings, and $netc other relationships\n";


my %hpar = ();
my %hfam = ();
my %hdup = ();
my %hkid = ();

## First, search for only dups
foreach my $id (@ids) { $hdup{$id} = [$id]; }
    
foreach my $id (@ids) {
    my $r = $hrel{$id};
    my @others = sort keys %{$r};
    foreach my $other (@others) {
	my $rel = $hrel{$id}{$other};
	if ( $rel eq "DUP" ) {
	    my @newdups = sort(uniq(@{$hdup{$id}},@{$hdup{$other}}));
	    foreach my $dup (@newdups) {
		$hdup{$dup} = \@newdups;
	    }
	}
    }
}

## Second, seach for parents-offsprint relationship
my %hskip = ();
my $nParentsSameSexError = 0;
foreach my $id (@ids) {  ## for each ID...
    my $r = $hrel{$id};  ## look for all relatedness
    my @others = sort keys %{$r};
    next unless ( $hdup{$id}->[0] eq $id );  ## skip redundancies in duplicates, only consider dup-representitive IDs
    
    my @POs = (); 
    foreach my $other (@others) {
	my $rel = $hrel{$id}{$other};
	if ( $rel eq "PO" ) {
	    next unless ( $hdup{$other}->[0] eq $other );  ## skip redundancies in duplicates	    
	    push(@POs,$other);
	}
    }

    ## If an individual have more than 3 POs, automatically skip the individual -- no support for multi-generational families.
    if ( $#POs > 1 ) {
	$hskip{$id} = 1;
	next;
    }
    elsif ( $#POs < 1 ) { ## one parent is missing
	next;
    }

    ## see if the individual have both mother and father
    my $dad = $POs[0]; ## arbitrarily assign dad
    my $mom = $POs[1]; ## arbitrarily assign mom

    if ( defined($hrel{$dad}{$mom}) ) { ## if they are related, forget about it, they might be grandparents - grandchildren
	next;
    }
    elsif ( $hsex{$dad} == $hsex{$mom} ) { ## if they have the same sex, forget about it
	++$nParentsSameSexError;
	next;
    }

    if ( $hsex{$dad} > $hsex{$mom} ) { ## if they have sex switched, fix it
	$dad = $POs[1];
	$mom = $POs[0];
    }

    next if ( defined($hpar{$dad}) && ( $hpar{$dad} ne $mom ) ); ## if a parent have children with another spouse, skip to avoid confusion
    next if ( defined($hpar{$mom}) && ( $hpar{$mom} ne $dad ) ); ## if a parent have children with another spouse, skip to avoid confusion    

    unless ( defined($hfam{"$dad:$mom"}) ) {  ## define a family if does not exist    
	$hfam{"$dad:$mom"} = [];
	$hpar{$dad} = $mom;
	$hpar{$mom} = $dad;
    }
    push(@{$hfam{"$dad:$mom"}},$id);  ## add a child
    $hkid{$id} = 1;                   ## register ID as a child
}

print STDERR "Observed $nParentsSameSexError possible sex match errors between spouses\n";

## Remove any possible overlaps in families. Dad and Mom should belong to only a single family
if ( $rmOverlap ) {
    my %hobs = ();
    my @toremove = ();
    foreach my $dadmom (sort keys %hfam) {  ## Iterate each families
	my @mids = split(/:/,$dadmom);
	push(@mids,@{$hfam{$dadmom}});
	my $remove = 0;
	foreach my $mid (@mids) {
	    if ( defined($hobs{$mid}) ) { ++$remove; }
	    $hobs{$mid} = 1;
	}
	if ( $remove > 0 ) {
	    push(@toremove,$dadmom);
	}
    }
    print STDERR "Removing ".($#toremove+1)." families with partial overlaps...\n";
    foreach my $dadmom (@toremove) {
	delete $hfam{$dadmom};
    }
}

print STDERR "Writing PED file across ".(scalar keys %hfam)." nuclear families..\n";

open(PED,">$outf") || die "Cannot open file $outf for writing\n";

## print each family first
foreach my $dadmom (sort keys %hfam) {
    my ($dad,$mom) = split(/:/,$dadmom);
    next if ( defined($hkid{$dad}) || defined($hkid{$mom}) );
    my @kids = @{$hfam{$dadmom}};
    my $fid = "$dad\_$mom";
    my @cents = ();
    
    foreach my $id (@{$hdup{$dad}}) {
	push(@cents,$hcent{$id});
    }
    foreach my $id (@{$hdup{$mom}}) {
	push(@cents,$hcent{$id});
    }    
    foreach my $kid (@kids) {
	foreach my $id (@{$hdup{$kid}}) {
	    push(@cents,$hcent{$id});
	}    	
    }
    my $centSuffix = join("_",sort(uniq(@cents)));
    if ( $centSuffix ne "." ) {
	$fid .= "\@$centSuffix";
    }

    print PED join("\t",$fid,join(",",@{$hdup{$dad}}),0,0,1,-9)."\n";
    print PED join("\t",$fid,join(",",@{$hdup{$mom}}),0,0,2,-9)."\n";
    foreach my $kid (@kids) {
	print PED join("\t",$fid,join(",",@{$hdup{$kid}}),$dad,$mom,$hsex{$kid},-9)."\n";	
    }
}

## print remaining duplicates
foreach my $id (sort keys %hdup) {
    next unless ( $#{$hdup{$id}} > 0 );
    next if ( defined($hkid{$id}) || defined($hpar{$id}) );
    next if ( $id ne $hdup{$id}->[0] );

    my @cents = ();    
    foreach my $id2 (@{$hdup{$id}}) {
	push(@cents,$hcent{$id2});
    }
    my $fid = $id;
    my $centSuffix = join("_",sort(uniq(@cents)));
    if ( $centSuffix ne "." ) {
	$fid .= "\@$centSuffix";
    }    
    #my $fid = "$id-".join("_",uniq(@cents));
    
    print PED join("\t",$fid,join(",",@{$hdup{$id}}),0,0,1,-9)."\n";    
}
close PED;

sub uniq {
    my %seen;
    return grep { !$seen{$_}++ } @_;    
}
