#!/usr/bin/perl -w

use strict;
use FindBin;
use Time::HiRes;
use lib $FindBin::Bin;
use hyunlib qw(initRef getCpGs forkExecWait readFasta);
use wGetOptions qw(wGetOptions wpod2usage);

my $invcf = "";
my $outvcf = "";
my $ref = "";
my $weightf = "";
my $infoKey = "DELTA_SVM";
my $multiWeightf = "";
my $rawScore = "";
my $region = "";
my $binbgzip = "$FindBin::Bin/bgzip";
my $bintabix = "$FindBin::Bin/tabix";

wGetOptions(
    "-Run deltaSVM (Lee et al. Nat Genet 2015) methods on VCF easily. This code is adopted from the deltasvm.pl by Dongwon Lee to make it easy to use for VCF input files",
    "--Required Options",
    "in-vcf=s",[\$invcf,"Input VCF file"],
    "out-vcf=s",[\$outvcf,"Output VCF file where deltaSVM score will be attached to the INFO field"],
    "weight=s",[\$weightf,"Weight file trained by delta-SVM method"],
    "multi-weight=s",[\$multiWeightf,"Tab-limited file containing the list of multiple weight files as [KEY] [FILENAME]"],    
    "ref=s",[\$ref,"FASTA-format sequences for the reference genome, which should match to the genome build used for the input VCF file"],
    "--Additional Options",
    "info-key=s",[\$infoKey,"The name of INFO field entry to record the delta svm score"],
    "region=s",[\$region,"Subset of genomic regions to extract from the input VCF"],
    "bgzip=s",[\$binbgzip,"Path to bgzip binary"],
    "tabix=s",[\$bintabix,"Path to tabix binary"],
    "raw-score",[\$rawScore,"Report (averaged) raw score of delta-svm binding score for each allele, rather than reporting the difference from reference allele"],
    ) || wpod2usage(2);


wpod2usage(2) unless ( ( $invcf ) && ( $outvcf ) && ( ( $weightf ) || ( $multiWeightf) ) && ( $ref ) );
						      
print STDERR "Analysis started at ".scalar(localtime)."\n";

### Initialize the reference FASTQ sequence
&initRef($ref);

my @weightfs = ();
my @infokeys = ();

if ( $multiWeightf ) {
    open(IN,$multiWeightf) || die "Cannot open file\n";
    while(<IN>) {
	my ($key,$fname) = split;
	push(@weightfs, $fname);
	push(@infokeys,$key);
    }
    close IN;
}
else {
    push(@weightfs,$weightf);
    push(@infokeys,$infoKey);
}

my @svmWeights = ();
my @kmerLengths = ();
for(my $i=0; $i < @weightfs; ++$i) {
    ### Read the weight file to contstruct the hash table
    print STDERR "Reading SVM weight file $weightfs[$i]..\n";
    my %svmW = ();
    my $calcRevComp = 0;
    my $kmerLength = 0;
    open(IN,$weightfs[$i]) || die "Cannot open the weight file $weightf\n";
    while(<IN>) {
	next if ( /^(#|kmer|bias)/ );
	my @F = split;
	if ( $#F == 1 ) {
	    $svmW{$F[0]} = $F[1];
	    $svmW{revcomp($F[0])} = $F[1];
	}
	elsif ( $#F == 2 ) {
	    $svmW{$F[0]} = $F[2];
	    $svmW{$F[1]} = $F[2];
	}
	else {
	    die "Cannot recognize the SVM weight file. line $. -- @F\n";
	}
	
	$kmerLength = length($F[0]) if ( $kmerLength == 0 );
    }
    close IN;
    push(@svmWeights,\%svmW);
    push(@kmerLengths,$kmerLength);
}

print STDERR "Finished reading weights and processing VCF file $invcf...\n";
### Read input VCF file

if ( $invcf =~ /\.gz$/ ) {
    if ( $region ) {
	open(VCF,"$bintabix -h $invcf $region|") || die "Cannot open file\n";	
    }
    else {
	open(VCF,"zcat $invcf|") || die "Cannot open file\n";
    }
}
else {
    die "--region option works only when the input VCF file is bgzipped and tabixed\n" if ( $region );
    open(VCF,$invcf) || die "Cannot open file\n"; 
}

if ( $outvcf =~ /\.gz$/ ) { open(OUT,"| $binbgzip -c > $outvcf") || die "Cannot open file\n"; }
elsif ( $outvcf ) { open(OUT,">$outvcf") || die "Cannot open file\n"; }
else { *OUT = *STDOUT; }

my $nwarnings = 0;

while(<VCF>) {
    if ( /^#/ ) {
	if ( /^#CHROM/ ) {
	    print OUT "##INFO=<ID=$infoKey,Number=A,Type=Float,Description=\"Delta-SVM scores calculated from the weight file $weightf\">\n";
	}
	print OUT $_;
    }
    else {
	my @F = split;
	my $refLength = length($F[3]);

	print STDERR "Processing $. lines... reading $F[0]:$F[1]... at ".scalar(localtime)."\n" if ( $. % 100000 == 0 );		

	if ( ( $F[3] =~ /[^ACGT]/ ) || ( $F[4] =~ /[^ACGT,]/ ) ) {
	    if ( $nwarnings < 10 ) {
		print STDERR "WARNING: Skipping $F[0]:$F[1]:$F[3]:$F[4] because non-A/C/G/T characters are observed. The delta-SVM score will not be added to the INFO field with key $infoKey\n";
		++$nwarnings;
		print STDERR "WARNING: Suppressing 10+ repeated warnings..\n" if ( $nwarnings == 10 );
	    }
	}
	else {
	    my $refSeq = uc(&readFasta($F[0],$F[1]-$kmerLengths[0]+1,$F[1]+$kmerLengths[0]-2+$refLength));
	    $refSeq =~ s/[^ACGT]/A/g;
	    my $winRef = $kmerLengths[0]+$refLength-1;
	    my @alts = split(/,/,$F[4]);	    

	    my @infoFields = ();

	    for(my $i=0; $i < @infokeys; ++$i) {
		if ( ( $i > 0 ) && ( $kmerLengths[$i] != $kmerLengths[$i-1] ) ) {
		    $refSeq = uc(&readFasta($F[0],$F[1]-$kmerLengths[$i]+1,$F[1]+$kmerLengths[$i]-2+$refLength));
		    $refSeq =~ s/[^ACGT]/A/g;		    
		    $winRef = $kmerLengths[$i]+$refLength-1;
		}
	    
		my $sumRef = 0;
		for(my $j=0; $j < $winRef; ++$j) {
		    $sumRef += $svmWeights[$i]->{substr($refSeq,$j,$kmerLengths[$i])};
		}

		my @deltaSVMScores = ();

		if ( $rawScore ) {
		    push(@deltaSVMScores,sprintf("%.5lf",$kmerLengths[$i] * ( $sumRef / $winRef )));
		}
		
		foreach my $alt (@alts) {
		    my $altSeq = substr($refSeq,0,$kmerLengths[$i]-1).$alt.substr($refSeq,1-$kmerLengths[$i]);
		    my $winAlt = $kmerLengths[$i]+length($alt)-1;
		    my $sumAlt = 0;
		    for(my $j=0; $j < $winAlt; ++$j) {
			$sumAlt += $svmWeights[$i]->{substr($altSeq,$j,$kmerLengths[$i])};
		    }
		    
		    ## To make deltaSVM score compatible to the original code, we rescale the scores by kmer length
		    if ( $rawScore ) {
			push(@deltaSVMScores,sprintf("%.5lf",$kmerLengths[$i] * ( $sumAlt / $winAlt)));
		    }
		    else {
			push(@deltaSVMScores,sprintf("%.5lf",$kmerLengths[$i] * ( $sumAlt / $winAlt - $sumRef / $winRef )));			
		    }
		}
		my $infoField = $infokeys[$i] . "=".join(",",@deltaSVMScores);
		push(@infoFields,$infoField);
	    }
	    $F[7] .= ";".join(";",@infoFields);
	}
	print OUT join("\t",@F)."\n";
    }
}

close VCF;
close OUT;

if ( $outvcf =~ /\.vcf.gz$/ ) {
    &forkExecWait("$bintabix -pvcf $outvcf");
}

print STDERR "Analysis finished at ".scalar(localtime)."\n";

sub revcomp {
    my $seq = shift @_;
    my $rcseq = $seq;
    $rcseq =~ tr/acgtACGT/tgcaTGCA/;
    $rcseq = scalar reverse $rcseq;
    return $rcseq;
}
